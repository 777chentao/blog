(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{587:function(v,_,t){"use strict";t.r(_);var r=t(6),s=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"跨域请求的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨域请求的概念"}},[v._v("#")]),v._v(" 跨域请求的概念")]),v._v(" "),t("ul",[t("li",[v._v("同源策略：当两个网址的"),t("strong",[v._v("协议")]),v._v("，"),t("strong",[v._v("域名")]),v._v("，"),t("strong",[v._v("端口")]),v._v("都一致的时候，我们称这两个网址是同源的")]),v._v(" "),t("li",[v._v("浏览器限制了脚本发起的资源请求 "),t("em",[v._v("（一般是 XHR 或 Fetch API）")]),v._v(" 只能发生在同源网址之间，如果本网页想要访问非同源网址的资源就会产生跨域请求")])]),v._v(" "),t("h2",{attrs:{id:"跨域请求发送出去了吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨域请求发送出去了吗"}},[v._v("#")]),v._v(" 跨域请求发送出去了吗")]),v._v(" "),t("ul",[t("li",[v._v("对于简单请求，跨域请求发送出去了，只是结果被浏览器拦截了")]),v._v(" "),t("li",[v._v("对于非简单请求，由于预检过程的存在，真正的跨域请求没有发送出去")])]),v._v(" "),t("h2",{attrs:{id:"跨域请求的解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨域请求的解决方案"}},[v._v("#")]),v._v(" 跨域请求的解决方案")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("目前最常用的 "),t("strong",[v._v("CORS")]),v._v("：服务器端可以在 HTTP 响应头上通过 "),t("code",[v._v("Access-Control-Allow-(Origin/Headers/Methods/Credentials/)")]),v._v(" 等响应头字段设置允许访问该资源的请求源，请求头，请求方法，是否允许携带 cookies 等")])]),v._v(" "),t("li",[t("p",[v._v("webpack 提供的 "),t("strong",[v._v("proxy")]),v._v("：仅适用于开发阶段")])]),v._v(" "),t("li",[t("p",[v._v("Nginx 添加请求头：允许的源很难动态更改")])]),v._v(" "),t("li",[t("p",[v._v("JSONP 具体操作看下面，存在的问题有：")]),v._v(" "),t("ul",[t("li",[v._v("只允许 GET 请求，因此 URL 长度受限，不安全")]),v._v(" "),t("li",[v._v("需要服务器端进行配合")])])])]),v._v(" "),t("h2",{attrs:{id:"cors-方案中预检过程是什么样的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cors-方案中预检过程是什么样的"}},[v._v("#")]),v._v(" cors 方案中预检过程是什么样的？")]),v._v(" "),t("ul",[t("li",[v._v("提到"),t("strong",[v._v("简单请求")]),v._v("和"),t("strong",[v._v("非简单请求")]),v._v("，见 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"}},[v._v("MDN"),t("OutboundLink")],1),v._v("，只有非简单请求才会触发预检过程")]),v._v(" "),t("li",[v._v("浏览器首先发出一个 OPTIONS 请求，包含非简单请求中存在的请求信息，如请求方法，请求头，源等等")]),v._v(" "),t("li",[v._v("服务器端返回它所允许的上述内容，并且如果预检请求能够通过就返回 200 响应")]),v._v(" "),t("li",[v._v("浏览器接收到响应后，再判断是否真正发出非简单请求")])]),v._v(" "),t("h2",{attrs:{id:"jsonp-方案的大致流程是什么样的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsonp-方案的大致流程是什么样的"}},[v._v("#")]),v._v(" jsonp 方案的大致流程是什么样的？")]),v._v(" "),t("ul",[t("li",[v._v("浏览器端声明需要执行的 callback 函数，比如叫 run")]),v._v(" "),t("li",[v._v("浏览器端动态生成 script 标签，将 src 属性指向目标 url 同时携带上参数 callback=run")]),v._v(" "),t("li",[v._v("服务器端接收到请求后将结果包装成 json 格式，同时返回字符串 run(json 格式的结果)")]),v._v(" "),t("li",[v._v("浏览器端接收到数据后就会执行相应的 run 函数")])]),v._v(" "),t("h2",{attrs:{id:"nginx-和-webpack-代理方式的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx-和-webpack-代理方式的区别是什么"}},[v._v("#")]),v._v(" nginx 和 webpack 代理方式的区别是什么？")]),v._v(" "),t("ul",[t("li",[v._v("nginx 是通过为每一个 HTTP 响应添加上满足 CORS 要求的请求头实现的跨域，本质上请求还是通过浏览器发出的")]),v._v(" "),t("li",[v._v("webpack 是通过内部发送请求的方式绕过浏览器获取到结果之后再返回给浏览器，本质上请求不是通过浏览器发出的")])])])}),[],!1,null,null,null);_.default=s.exports}}]);