(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{602:function(n,e,t){"use strict";t.r(e);var a=t(6),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"一、系统设计与实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、系统设计与实现"}},[n._v("#")]),n._v(" 一、系统设计与实现")]),n._v(" "),t("h3",{attrs:{id:"_1-1-设计背景与意义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-设计背景与意义"}},[n._v("#")]),n._v(" 1.1 设计背景与意义")]),n._v(" "),t("p",[n._v("目前，商业通用多体动力学仿真软件在铁路行业广泛应用，这些软件尽管在仿真效率、建模精度、功能完备程度等方面具有优势，但是也存在仿真资源模型复用程度不高、二次开发困难以及潜在的许可证等问题。")]),n._v(" "),t("p",[n._v("为了发展和完善自研的动力学仿真算法，逐步摆脱对国外仿真软件的依赖，并最终打破国外的仿真技术垄断，开发一款自主可控铁道车辆动力学软件势在必行。")]),n._v(" "),t("p",[n._v("国内的一些研究机构一直在致力于开发自主可控的，或者针对铁路领域特定研究方向的多体动力学仿真软件。但研究人员往往把开发的重心放在算法求解上，在前后处理上只实现基础的输入输出，而缺乏并行计算，数据共享，跨平台访问等功能特性；在架构上也会选择最为简单的单体架构，即将算法和数据模型的前后处理耦合在一起。这种on-the-fly的开发模式虽然具有较高的灵活性和可控性，但是任何代码的变动都需要重新编译整个程序，开发效率低，代码重用度不高。因此，这些仿真软件虽然具有商业推广的价值，但是由于用户交互体验不佳，功能单一，通常只在机构内部使用。")]),n._v(" "),t("p",[n._v("此项目基于云计算概念，将云仿真这种概念应用到铁路车辆动力学仿真软件的设计与开发中，可以实现将复杂的仿真计算、结果分析等核心求解逻辑与软件界面、用户交互等前后处理逻辑相分离，有助于推动算法自主可控，用户交互良好，具有应用价值与商业推广价值的动力学仿真软件的进一步发展。")]),n._v(" "),t("h3",{attrs:{id:"_1-2-系统功能设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-系统功能设计"}},[n._v("#")]),n._v(" 1.2 系统功能设计")]),n._v(" "),t("p",[n._v("如图1-1所示，一个完整的仿真流程总体上可以分为前处理，求解计算和后处理三个步骤。根据研究目的的不同，用户首先通过仿真软件的GUI界面建立相应的仿真模型，具体过程包括研究对象的物理参数输入，研究对象之间约束条件的建立，以及必要的模型交互和编辑；接着，软件内部将用户的参数输入以及必要的求解器设置参数整合成配置文件的形式，传输给核心的求解器进行计算；最终，求解器输出结果文件，再由相应的后处理程序对结果进行可视化展示。")]),n._v(" "),t("p",[n._v("​ "),t("img",{attrs:{src:"/hyw/image-20220720164328896.png",alt:"image-20220720164328896"}})]),n._v(" "),t("p",[n._v("图1‑1 通用仿真流程示意图")]),n._v(" "),t("h4",{attrs:{id:"_1-2-1-主要功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-主要功能"}},[n._v("#")]),n._v(" 1.2.1 主要功能")]),n._v(" "),t("p",[n._v("在前处理阶段，系统应该具有以下功能：")]),n._v(" "),t("p",[n._v("（1）以项目为聚合根的管理机制。构建抽象的仿真项目主体，关联用户以明确管理权限，向下包含列车车辆、运行线路、轨道参数、轮轨耦合参数等模型资源，明确仿真资源与仿真项目主体之间的引用关系，提供统一的查看、编辑、删除、增加功能页面。")]),n._v(" "),t("p",[n._v("（2）项目主体的状态同步。用户在任意终端对仿真项目建模状态的更改，在明确的同步操作后，需要在其它终端设备上实现建模状态的实时同步，确保单用户异地、跨设备地同步仿真过程，多用户实时同步仿真过程。")]),n._v(" "),t("p",[n._v("（3）资源复用。在构建新仿真项目的过程中，允许用户从现有仿真项目或者团队构建的仿真资源数据库中快速地克隆已有模型资源，并在该资源的基础上进行任意程度的更改而不影响原资源的状态。")]),n._v(" "),t("p",[n._v("（4）模型状态预览。针对运行线路、轨道型面等标准化的模型资源，提供一定程度的状态预览功能，根据用户输入的参数实时渲染相应的轨道线路图、钢轨型面等预览图，方便用户直观地查看数据的正确性与合理性。将资源预览的能力组件化，实现在不同场景下同一个资源预览逻辑的复用。")]),n._v(" "),t("p",[n._v("在求解计算阶段，系统应该具有以下功能：")]),n._v(" "),t("p",[n._v("（1）数据预校验。对于计算耗时、资源消耗严重的求解过程，有必要在真正的求解计算开始之前，对输入的参数进行预校验，避免错误的参数设置或不合理的精度要求导致求解过程发散、结果不精确等问题，造成计算资源的浪费。")]),n._v(" "),t("p",[n._v("（2）多求解过程并行运行。保持仿真过程之间的独立性，允许同时响应多个用户发起的仿真计算请求，建立仿真计算请求与用户，仿真项目主体之间的一一对应关系，确保并行运行的求解过程与仿真项目之间正确的匹配关系。")]),n._v(" "),t("p",[n._v("（3）算法的无感知更新机制。系统中仿真算法的迭代升级不应对用户的使用造成影响，在算法更新过程中，对于空闲的求解器立即进行算法的更新操作；对于仍在运行中的求解器使用原有算法完成整个流程后再进行算法的更新操作。")]),n._v(" "),t("p",[n._v("在后处理阶段，系统应该具有以下功能：")]),n._v(" "),t("p",[n._v("（1）仿真结果可视化交互。对于时序性的仿真过程，允许在结果查看界面以视频的形式播放仿真结果的渲染效果，用户可以选择性地暂停、回放仿真过程，点击研究对象模型查看更加详细的结果数据。")]),n._v(" "),t("p",[n._v("（2）仿真过程的实时与可回放机制。用户在查看仿真项目的结果时，对于正在运行中的仿真过程，能够实时地获取求解器计算得出的最新结果，并进行场景渲染和数据驱动；对于已经完成的仿真过程，能够获取到对应的完整计算结果，并进行场景渲染和数据驱动，允许用户快速地获取到某一时间点的结果数据及之后的连续数据。")]),n._v(" "),t("p",[n._v("除了前处理、求解计算和后处理三个阶段各自的功能外，系统整体还应该具有以下功能：")]),n._v(" "),t("p",[n._v("（1）权限管理机制。通过基于用户角色的权限管理机制明确匿名用户、普通用户、管理员用户之间的权限界限，通过基于资源的权限管理机制保障项目参与人员对仿真项目主体的增删改查能力，避免权限泄漏导致的资源安全问题。")]),n._v(" "),t("p",[n._v("（2）跨平台，跨终端能力。确保系统可以有效运行在Windows、Linux、Mac等操作系统下，确保系统功能页面在手机、平板、笔记本、PC、数据大屏等不同尺寸的显示设备下具有良好的自适应能力。")]),n._v(" "),t("h4",{attrs:{id:"_1-2-2-网络构架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-网络构架"}},[n._v("#")]),n._v(" 1.2.2 网络构架")]),n._v(" "),t("p",[n._v("选择基于B/S架构进行系统的开发。针对系统安全性问题，引入业界广泛使用的OpenID身份认证机制与OAuth2.0客户端授权协议；针对响应速度慢问题，采用内容分发网络(Content Delivery Network, CDN)和浏览器缓存技术提高用户首次访问应用时的响应速度。")]),n._v(" "),t("h3",{attrs:{id:"_1-3-总体框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-总体框架"}},[n._v("#")]),n._v(" 1.3 总体框架")]),n._v(" "),t("p",[t("img",{attrs:{src:"/hyw/image-20220720170439056.png",alt:"image-20220720170439056"}})]),n._v(" "),t("h2",{attrs:{id:"二、前处理模块功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、前处理模块功能"}},[n._v("#")]),n._v(" 二、前处理模块功能")]),n._v(" "),t("h3",{attrs:{id:"_2-1-参数录入功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-参数录入功能"}},[n._v("#")]),n._v(" 2.1 参数录入功能")]),n._v(" "),t("h4",{attrs:{id:"_2-1-1-技术选型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-技术选型"}},[n._v("#")]),n._v(" 2.1.1 技术选型")]),n._v(" "),t("p",[n._v("基于B/S架构进行前处理模块前端页面的开发，首先需要解决的是页面元素和参数数据的绑定与更新问题。目前，业界广泛应用于解决此类问题的框架或JavaScript库主要包括Angular、Vue和React。综合考虑各项因素，选择基于"),t("strong",[n._v("React")]),n._v("进行进一步的Web开发。")]),n._v(" "),t("p",[n._v("此外，进行跨平台、跨终端的应用开发，还需要解决自适应的尺寸适配问题。为此，引入企业级的UI设计系统"),t("strong",[n._v("Ant Design")]),n._v("进行响应式的界面布局，在采用React技术的前提下，依赖相应的开源UI组件库antd进行本系统用户交互界面的设计与排版。")]),n._v(" "),t("p",[n._v("此外，配合antd，基于react，采用umi基础前端框架，特别适合企业级别的平台管理系统开发。\n"),t("img",{attrs:{src:"/hyw/20230727140528.jpg",alt:"20230727140528"}}),n._v(" "),t("img",{attrs:{src:"/hyw/11.png",alt:"11"}}),n._v(" "),t("img",{attrs:{src:"/hyw/22.png",alt:"22"}}),n._v(" "),t("img",{attrs:{src:"/hyw/20231017173936.png",alt:"33"}})]),n._v(" "),t("h4",{attrs:{id:"_2-1-2-功能实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-功能实现"}},[n._v("#")]),n._v(" 2.1.2 功能实现")]),n._v(" "),t("p",[n._v("借助React及相应的UI组件库，本系统可以根据预先约定的数据交换格式快速地创建相应的用户交互界面元素，并且实现用户输入数据与内存中变量的绑定。而为了适应复杂的铁道车辆动力学仿真参数录入需求，需要考虑三个层面的数据校验能力。")]),n._v(" "),t("p",[n._v("第一个层面是单个独立数据的校验，如输入数据的类型，最大最小值，可选择的枚举类型等。针对此类校验需求，本系统通过Json Schema格式的中间语言声明式地定义了每个输入数据的校验规则，并依赖代码逻辑完成每个规则的校验。如图2‑1所示，页面根据左侧的表单数据配置选项渲染生成右侧的输入框，根据选项中的valueType、required和min字段完成了输入数据的校验以及必要的错误信息提示。")]),n._v(" "),t("p",[t("img",{attrs:{src:"/hyw/image-20220720191533344.png",alt:"image-20220720191533344"}})]),n._v(" "),t("p",[n._v("图2‑1 参数录入和数据校验示意图")]),n._v(" "),t("p",[n._v("第二个层面是相关联数据的一致性校验，如在车线耦合动力学仿真过程中需要对运行轨道的平断面和纵断面进行参数设置，那么就需要保证平断面参数设置时各段圆曲线、缓和曲线和夹直线之间的连续性以及平断面和纵断面总长度的一致性。针对此类校验需求，本系统通过基于已有数据进行推导的方式实现待录入参数的预填充。以运行轨道的平断面参数为例，运行轨道主要由直线段以及圆曲线段构成，且直线段和圆曲线段之间需要连接一段缓和曲线，因此设计运行轨道平断面数据由开始里程、轨道型式、曲线半径、长度、缓和曲线长度和超高组成，且满足以下预填充原则：（1）若当前线路段是运行轨道的第一段线路，预填充开始里程为0，否则预填充开始里程为前一线路段平断面参数的开始里程、长度和缓和曲线长度之和；（2）若前一线路段为圆曲线段（曲线半径大于0），则当前线路段为直线段，预填充曲线半径为0，超高为0。")]),n._v(" "),t("p",[n._v("第三个层面是输入参数的合理性校验，该层面的数据校验逻辑往往需要专业的铁道车辆背景知识，如缓和曲线的长度需要根据曲线半径，结合该地段的行车速度和地形条件进行合理选用，至少应保证曲线超高在缓和曲线范围内顺完。考虑到这类数据校验的需求往往需要综合整个仿真项目的参数设置，无法在单个页面完成，因此本系统在前处理模块的前端应用中设计了单独的系统参数自检页面，在此页面终端设备将当前仿真项目的全部仿真资源参数数据上传到服务器，由服务器整合全部数据进行参数校验。若预定义的数据校验通过，则将上传的全部数据进行持久化存储并渲染校验成功页面，否则不执行持久化存储并直接渲染校验失败页面。")]),n._v(" "),t("p",[n._v("最终，前处理模块的参数录入校验功能的时序图如图2‑2所示。其中，第一、二两个层面的数据校验发生在用户与终端之间输入参数和渲染校验结果的循环中；第三个层面的数据校验发生在服务器内部的参数校验环节。")]),n._v(" "),t("p",[t("img",{attrs:{src:"/hyw/image-20220720191604400.png",alt:"image-20220720191604400"}})]),n._v(" "),t("p",[n._v("图2-2 参数录入校验功能时序图")]),n._v(" "),t("h3",{attrs:{id:"_2-2-资源预览功能实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-资源预览功能实现"}},[n._v("#")]),n._v(" 2.2 资源预览功能实现")]),n._v(" "),t("p",[n._v("考虑到数据校验不能完全避免参数录入过程中的错误输入，提出了根据用户输入的参数实时渲染相应的资源预览图的方式以更加直观、高效地帮助用户查看所输入数据的正确性与合理性。")]),n._v(" "),t("h4",{attrs:{id:"_2-2-1-技术选型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-技术选型"}},[n._v("#")]),n._v(" 2.2.1 技术选型")]),n._v(" "),t("p",[n._v("具体的资源预览图绘制过程依托于浏览器原生提供的canvas接口，通过第三方工具库fabric.js提供的上层封装实现，因此兼具良好的性能和易用性。")]),n._v(" "),t("h4",{attrs:{id:"_2-2-2-功能实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-功能实现"}},[n._v("#")]),n._v(" 2.2.2 功能实现")]),n._v(" "),t("p",[n._v("对于线路纵断面预览图，其输入为运行轨道的平断面参数中各条线路段的开始里程、曲线半径、长度和纵断面参数中各条线路段的开始里程、坡道长度和坡度，输出主要分为公里标绘制区域、线路平面绘制区域和设计坡度绘制区域，整个过程分为绘制阶段和自适应阶段。")]),n._v(" "),t("p",[n._v("在预览图的绘制阶段，不考虑图像超出画布边界的问题，完成三块区域的绘制内容。对于公里标绘制区域，通过计算平断面线路段的总里程和纵断面线路段的总里程，取二者的较大值为公里标的总长度，并按照100米为基础刻度绘制小刻度线，1000米为基础刻度绘制大刻度线。对于线路平面绘制区域，迭代各条线路段的输入参数，根据直线（曲线半径等于0）和圆曲线（曲线半径大于0）的不同绘制相应的图像区域，以当前图像区域中画笔的末端坐标为下一图像区域中画笔的首端坐标，并为圆曲线段添加相应的标注。对于设计坡度绘制区域，采用与线路平面绘制区域一致的绘制思路迭代完成。")]),n._v(" "),t("p",[n._v("在预览图的自适应阶段，首先计算三块绘制区域总体的长度和高度，结合Web页面中画布元素的长度和宽度计算相应的缩放因子，为整个画布绘制上下文环境设定该缩放因子。随后，通过三块绘制区域的边界计算中心坐标，结合Web页面中画布元素的中心坐标计算相应的平移偏移量，为整个画布绘制上下文环境设定该平移偏移量。最终，形成如图2‑3所示的线路纵断面预览图。")]),n._v(" "),t("p",[t("img",{attrs:{src:"/hyw/image-20220720191805196.png",alt:"image-20220720191805196"}})]),n._v(" "),t("p",[n._v("图2‑3 线路纵断面预览图")]),n._v(" "),t("p",[t("img",{attrs:{src:"/hyw/Screenshot_2023-10-17-17-17-40-501_com.tencent.mtt.jpg",alt:"image-20220720191805196"}}),n._v(" "),t("img",{attrs:{src:"/hyw/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231017171917.png",alt:"image-20220720191805196"}}),n._v(" "),t("img",{attrs:{src:"/hyw/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231017171928.png",alt:"image-20220720191805196"}})]),n._v(" "),t("h3",{attrs:{id:"_2-3-项目管理功能实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-项目管理功能实现"}},[n._v("#")]),n._v(" 2.3  项目管理功能实现")]),n._v(" "),t("h4",{attrs:{id:"_2-3-1-技术选型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-技术选型"}},[n._v("#")]),n._v(" 2.3.1 技术选型")]),n._v(" "),t("p",[n._v("针对传统的桌面端动力学仿真软件提供的仿真资源库不完善，可扩展性不足导致的在多个仿真项目中复用之前的仿真资源不方便的问题，提出了一套组合粒度更加精细化、扩展性更强的基于元数据的仿真资源组合技术。")]),n._v(" "),t("h4",{attrs:{id:"_2-3-2-功能实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-功能实现"}},[n._v("#")]),n._v(" 2.3.2  功能实现")]),n._v(" "),t("p",[t("strong",[n._v("项目复用")])]),n._v(" "),t("p",[n._v("首先，根据理论知识对模型资源进行粒度的划分，并建立表征资源特性的元数据。接着，为所有的模型资源建立全局唯一的资源标识符，用以在仿真的全流程中快速而精确地获取任意资源的全部元数据。最后，根据模型资源的组合关系建立相应的资源标识符的索引关系，形成如图2-4所示的资源组合结构。通过该技术，将不同仿真项目对同一仿真资源的使用转换为不同的仿真项目元数据对同一仿真资源标识符的包含关系，有效地避免了在不同的仿真项目中重复地输入同一个仿真模型资源的各种参数，同时用户对特定模型资源的更新可以有效地立即应用到任何仿真项目中。")]),n._v(" "),t("p",[n._v("![img](file:///C:/Users/14495/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png)")]),n._v(" "),t("p",[n._v("图12-4 基于元数据的仿真资源组合技术示意图")]),n._v(" "),t("p",[t("strong",[n._v("多人协同仿真")])]),n._v(" "),t("p",[n._v("针对传统的桌面端动力学仿真软件采用操作系统自带的文件管理系统进行仿真项目资源的存储导致的个人跨设备同步仿真内容，团队成员之间共享仿真项目更改不方便的问题，提出了采用基于中心化的资源存储方式进行仿真项目信息的存储与管理，并结合基于元数据的仿真资源组合技术进行内容的获取。")]),n._v(" "),t("p",[n._v("在具体的实现上，由于为解决仿真资源复用问题而开发的基于元数据的仿真资源组合技术已经将仿真资源之间的组合关系转换成仿真资源元数据对仿真资源唯一标识符的包含关系。因此，在系统架构图中，通过在资源平面引入关系型数据库将这种包含关系序列化到数据表中，作为唯一标识仿真项目信息的存储资源；在逻辑层开发相应的服务端程序为项目仿真资源的管理提供统一的接口；随后，在应用层通过如图2-5所示的代码逻辑，根据虚拟根组件的唯一标识符一次性递归式地获取整个仿真项目的所有信息；最后，将这些信息通过网络传输给交互层进行渲染与展示。")]),n._v(" "),t("p",[n._v("![img](file:///C:/Users/14495/AppData/Local/Temp/msohtmlclip1/01/clip_image004.png)")]),n._v(" "),t("p",[n._v("图2-5 查询组件元数据代码")]),n._v(" "),t("p",[n._v("通过上述的实现方式，每当某一个用户在一台终端设备上进行了仿真项目信息的更改，在显式的上传操作之后，最新的更改将被存储到资源平面的关系型数据库中，当任何用户在任何终端设备上再次访问该仿真项目时，应用程序将会获得最新的仿真资源数据。此外，借助这种中心化的资源存取形式，再结合逻辑层提供的用户权限管理功能，可以实现更高层面的仿真项目资源管理能力。")]),n._v(" "),t("h2",{attrs:{id:"三、前处理模块零碎知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、前处理模块零碎知识"}},[n._v("#")]),n._v(" 三、前处理模块零碎知识")]),n._v(" "),t("h3",{attrs:{id:"_3-1-初始化与本地储存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-初始化与本地储存"}},[n._v("#")]),n._v(" 3.1 初始化与本地储存")]),n._v(" "),t("h4",{attrs:{id:"_3-1-1-布局初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-布局初始化"}},[n._v("#")]),n._v(" 3.1.1 布局初始化")]),n._v(" "),t("p",[n._v("umi中的@umijs/plugin-layout将布局通过 umi 插件的方式内置，只需通过简单的配置即可拥有 Ant Design 的 Layout，包括导航以及侧边栏。从而做到用户无需关心布局。")]),n._v(" "),t("p",[n._v("app.tsx中：")]),n._v(" "),t("div",{staticClass:"language-react extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import type { RunTimeLayoutConfig } from '@@/plugin-layout/layoutExports';\n\nexport const layout: RunTimeLayoutConfig = (state) => {\n  const { initialState, setInitialState } = state;\nreturn {\n  footerRender: () => <Footer />, \n  //自定义页脚，具体组件有点不懂\n  logout: async () => { \n  //退出按钮设置，默认里面无操作，本项目需清空本地存储以及状态，并回到登陆界面\n    saveToSession('token', '');\n    await setInitialState({});\n    history.push(loginPath);\n  },\n  onPageChange: () => { \n  //页面改变判断有无用户，没有回到登陆界面\n    const { currentUser } = initialState ?? {};\n    const { location } = history;\n    if (!currentUser) {\n      if (location.pathname !== loginPath) {\n        history.push(loginPath);}}},};\n")])])]),t("h4",{attrs:{id:"_3-1-2-数据初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-数据初始化"}},[n._v("#")]),n._v(" 3.1.2 数据初始化")]),n._v(" "),t("p",[n._v("在src/app.ts中导出getInitialState（）约定生产初始化数据，在登录组件中搭配@umijs/plugin-model消费初始化数据。通常该插件会配置 @umijs/plugin-layout 和 @umijs/plugin-access 插件一起使用，和 Layout 插件一起使用的时候返回的数据要符合 Layout 的要求。")]),n._v(" "),t("p",[n._v("//getInitialState是一个 async 的 function。会在整个应用最开始执行，返回值会作为全局共享的数据，其他组件通过useModel('@@initialState') 直接获取到这份数据。")]),n._v(" "),t("p",[n._v("在app.tsx中获得初始化数据：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("export async function getInitialState(): Promise<InitialStateType> {\n\n  //如果当前地址等于登录页面地址返回空\n  if (history.location.pathname.toLowerCase() === loginPath) return {}; \n  \n  //获得本地token（请求头）\n   const configuration = await getConfiguration();\n   \n  //没有token，重新登录\n   if (!configuration.currentUser.isAuthenticated) \n     history.push(loginPath);\n\n  //返回成功，将数据存入currentUser，id存入currentProjecyId\n  return \n      {\n        currentUser: configuration.currentUser,\n      };\n  }\n")])])]),t("p",[n._v("在@/pages/Account/Login/index.tsx中使用初始化数据：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const Login: React.FC = () => {\n\n//const { initialState, loading, error, refresh, setInitialState } = useModel('@@initialState')，可获得5个参数：\n     initialState：getInitialState 的返回值\n     refresh：重新执行 getInitialState 方法，并获取新数据\n     setInitialState：手动设置 initialState 的值\n\n  const { setInitialState } = useModel('@@initialState');\n  \n   const handleSubmit = async (values: LoginDto) => {\n    const loginResult = await login(values);\n    if (loginResult.access_token) {\n      message.success('登录成功');\n      sessionStorage.setItem(\n        'token',\n        `${loginResult.token_type} ${loginResult.access_token}`\n      );\n      const configuration = await getConfiguration();\n      //将登录成功得到的数据设置为初始化数据\n      await setInitialState((s) => ({\n        ...s,\n        currentUser: configuration.currentUser,\n      }));\n\n      if (!history) return;\n      const { query } = history.location;\n      const { redirect } = query as { redirect: string };\n      history.push(redirect ?? '/');\n    } else {\n      message.error('登陆失败');\n    }\n  };\n")])])]),t("h4",{attrs:{id:"_3-1-3-本地储存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-本地储存"}},[n._v("#")]),n._v(" 3.1.3 本地储存")]),n._v(" "),t("p",[n._v("localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。")]),n._v(" "),t("p",[n._v("sessionStorage和cookie存储的数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。打开一个页面时记录sessionStorage,当你把页面或者浏览器关闭时session中的数据即销毁。")]),n._v(" "),t("p",[t("strong",[n._v("html4：cookie和session")])]),n._v(" "),t("p",[n._v("cookie保存在浏览器端，session保存在服务器端，关闭浏览器后数据销毁。")]),n._v(" "),t("p",[n._v("cookie：cookie机制：如果不在浏览器中设置过期时间，cookie被保存在内存中，生命周期随浏览器的关闭而结束，这种cookie简称会话cookie。如果在浏览器中设置了cookie的过期时间，cookie被保存在硬盘中，关闭浏览器后，cookie数据仍然存在，直到过期时间结束才消失。Cookie是服务器发给客户端的特殊信息，cookie是以文本的方式保存在客户端，每次请求时都带上它。")]),n._v(" "),t("p",[n._v("session：当服务器收到请求需要创建session对象时，首先会检查客户端请求中是否包含sessionid。如果有sessionid，服务器将根据该id返回对应session对象。如果客户端请求中没有sessionid，服务器会创建新的session对象，并把sessionid在本次响应中返回给客户端。")]),n._v(" "),t("p",[n._v("cookie只能保存字符串类型，以文本的方式；session通过类似与Hashtable的数据结构来保存，能支持任何类型的对象(session中可含有多个对象)")]),n._v(" "),t("p",[t("strong",[n._v("html5：Web Storage与本地数据库")])]),n._v(" "),t("p",[n._v("Web Storage存储机制是对HTML4中cookie存储机制的一个改善。本地数据库是HTML5中新增的一个功能，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了，这大大减轻了服务器端的负担，同时也加快了访问数据的速度。")]),n._v(" "),t("p",[n._v("webStorage：")]),n._v(" "),t("p",[n._v("1.sessionStorage：将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据。")]),n._v(" "),t("p",[n._v("2.localStorage：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。")]),n._v(" "),t("p",[n._v("这两者的区别在于，sessionStorage为临时保存，而localStorage为永久保存。localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的"),t("strong",[n._v("stringify和parse")]),n._v("来处理。")]),n._v(" "),t("p",[n._v("webStorage方法：")]),n._v(" "),t("p",[n._v("setItem (key, value) ——  保存数据，以键值对的方式储存信息。")]),n._v(" "),t("p",[n._v("getItem (key) ——  获取数据，将键值传入，即可获取到对应的value值。")]),n._v(" "),t("p",[n._v("removeItem (key) ——  删除单个数据，根据键值移除对应的信息。")]),n._v(" "),t("p",[n._v("clear () ——  删除所有的数据")]),n._v(" "),t("p",[n._v("key (index) —— 获取某个索引的key")]),n._v(" "),t("h3",{attrs:{id:"_3-2-登录权限与网络请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-登录权限与网络请求"}},[n._v("#")]),n._v(" 3.2 登录权限与网络请求")]),n._v(" "),t("h4",{attrs:{id:"_3-2-1-登录与token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-登录与token"}},[n._v("#")]),n._v(" 3.2.1 登录与token")]),n._v(" "),t("p",[n._v("Token 是在服务端产生的。如果前端使用用户名/密码向服务端请求认证，服务端认证成功，那么在服务端会返回 Token 给前端。前端可以在每次请求的时候带上 Token 证明自己的合法地位。一旦 Token 过期，就反馈给前端，前端使用 Refresh Token 申请一个全新 Token 继续使用。")]),n._v(" "),t("p",[n._v("此项目采用分离认证服务。前端登录后，后端创建返回token和refresh token，前端将传参和token一起发送给后端进行业务请求，后端根据token判断认证前端身份，token有效，处理业务，返回给前端。当Token 过期了，前端仍然需要去认证服务更新 Token。")]),n._v(" "),t("div",{staticClass:"language-react extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const handleSubmit = async (values: LoginDto) => {\n    const loginResult = await login(values);\n    //判断是否返回token\n    if (loginResult.access_token) {\n      message.success('登录成功');\n      //保存token\n      sessionStorage.setItem(\n        'token',\n        `${loginResult.token_type} ${loginResult.access_token}`\n      );\n      const configuration = await getConfiguration();\n      await setInitialState((s) => ({\n        ...s,\n        currentUser: configuration.currentUser,\n      }));\n\n      if (!history) return;\n      const { query } = history.location;\n      const { redirect } = query as { redirect: string };\n      history.push(redirect ?? '/');\n    } else {\n      message.error('登陆失败');\n    }\n  };\n")])])]),t("h4",{attrs:{id:"_3-2-2-网络请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-网络请求"}},[n._v("#")]),n._v(" 3.2.2 网络请求")]),n._v(" "),t("p",[n._v("@umijs/plugin-request 基于 umi-request 和 ahooks 的 useRequest 提供了一套统一的网络请求和错误处理方案。")]),n._v(" "),t("p",[n._v("在app.tsx中：")]),n._v(" "),t("div",{staticClass:"language-react extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import type { RequestConfig } from '@@/plugin-request/request';\n\nexport const request: RequestConfig = {\n\n  //ip地址\n  prefix:'http://192.168.155.12:44359' ,\n  \n  errorConfig: {\n    adaptor: (res) => {\n      console.log(res)\n      return {\n        data: res,\n        success: !res.error,\n        errorMessage: res.error?.message ?? '操作失败',\n        errorCode: res.error?.code,\n      };\n    },\n  },\n  \n  //请求前的拦截，判断请求头是否有token，没有就设置加上\n  requestInterceptors: [\n    (url, options) => {\n      const headers = options.headers as Record<string, string>;\n      if (!headers.authorization) {\n        headers.authorization = sessionStorage.getItem('token') ?? '';\n      }\n      headers['Accept-Language'] = 'zh-Hans';\n      return { \n        url, \n        options: { ...options, headers } \n      };\n    },\n  ],\n};\n")])])]),t("p",[n._v("每个页面的网络请求可在service.ts中封装好，再在各页面中调用。")]),n._v(" "),t("p",[n._v("service.ts中封装：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//ts，对各类数据定义数据类型\nimport type {\n  AppConfiguration,\n  LoginDto,\n  LoginResultDto,\n  ResetPasswordDto,\n  UserCreateDto,\n  UserRoleDto,\n} from '@/pages/Account/data';\n\nimport { request } from 'umi';\nimport { request as requestConfig } from '@/app';\nimport type { RequestOptionsInit } from 'umi-request';\n\n//有参数的post\nexport async function login(\n  credential: LoginDto,\n  options?: RequestOptionsInit\n): Promise<LoginResultDto> {\n  return request('/connect/token', {\n    ...options,\n    prefix: requestConfig.prefix?.replace('44359', '44390'),\n    method: 'POST',\n    requestType: 'form',\n    data: {\n      ...credential,\n      grant_type: 'password',\n      client_id: 'Cttsim_App',\n      client_secret: '1q2w3e*',\n    },\n  });\n}\n\n//get请求\nexport async function getConfiguration(\n  options?: RequestOptionsInit\n): Promise<AppConfiguration> {\n  return request('/api/abp/application-configuration', {\n    ...options,\n    prefix: requestConfig.prefix?.replace('44359', '44390'),\n    method: 'GET',\n  });\n}\nexport async function fetchUsers(\n  options?: RequestOptionsInit\n): Promise<UserRoleDto[]> {\n  return request('/api/app/user-roles', {\n    ...options,\n    prefix: requestConfig.prefix?.replace('44359', '44390'),\n    method: 'GET',\n  });\n}\n//拼接在请求头get\nconst gethash=(\n    projectId:String,\n    options?: RequestOptionsInit\n  ) =>{\n    return request(`/api/cttsim/calculate/times/${projectId}`, {\n      ...options,\n      method: 'GET',\n    });\n  }\n\n//url后加参数的delete请求\nexport async function deleteUserById(id: string, options?: RequestOptionsInit) {\n  return request(`/api/identity/users/${id}`, {\n    ...options,\n    prefix: requestConfig.prefix?.replace('44359', '44390'),\n    method: 'DELETE',\n  });\n}\n\nexport async function createUser(\n  data: UserCreateDto,\n  options?: RequestOptionsInit\n) {\n  return request(`/api/identity/users`, {\n    ...options,\n    prefix: requestConfig.prefix?.replace('44359', '44390'),\n    method: 'POST',\n    data,\n  });\n}\n\n//put请求\nexport async function resetPassword(\n  data: ResetPasswordDto,\n  options?: RequestOptionsInit\n) {\n  return request(`/api/app/reset-password`, {\n    ...options,\n    prefix: requestConfig.prefix?.replace('44359', '44390'),\n    method: 'PUT',\n    data,\n  });\n}\n\n")])])]),t("p",[n._v("登录页面中index.tsx中应用：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import { getConfiguration, login } from '@/pages/Account/service';\n\nconst Login: React.FC = () => {\n  const { setInitialState } = useModel('@@initialState');\n\n  const handleSubmit = async (values: LoginDto) => {\n    const loginResult = await login(values);\n    if (loginResult.access_token) {\n      message.success('登录成功');\n      sessionStorage.setItem(\n        'token',\n        `${loginResult.token_type} ${loginResult.access_token}`\n      );\n      const configuration = await getConfiguration();\n      await setInitialState((s) => ({\n        ...s,\n        currentUser: configuration.currentUser,\n      }));\n\n      if (!history) return;\n      const { query } = history.location;\n      const { redirect } = query as { redirect: string };\n      history.push(redirect ?? '/');\n    } else {\n      message.error('登陆失败');\n    }\n  };\n")])])]),t("p",[n._v("管理页面表格数据获得：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" 格式：const { run } = useRequest(async (看接口文档是否需要传参) => 数据请求方法（传参），{\n manual：true 开启手动请求后，useRequest 不会默认执行，需要通过 run 来触发执行。\n onSuccess：data => {  //data为返回的数据，可有可无，取决于后端有没有回应\n    成功后的操作\n }\n })\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import { deleteUserById, fetchUsers } from '@/pages/Account/service';\n//利用umi的plugin-request插件进行后端数据的交互\nimport { useRequest } from '@@/plugin-request/request';\n\nconst UserManagement = () => {\n  const [userRoles, setUserRoles] = useState<UserRoleDto[]>([]);\n\n  const { loading, run: getUsers } = useRequest(fetchUsers, {\n    manual: true,\n    onSuccess: setUserRoles,\n  });\n\n  const { run: deleteUser } = useRequest(async (id) => deleteUserById(id), {\n    manual: true,\n    onSuccess: () => {\n      message.success('删除用户成功').then();\n      getUsers().then();\n    },\n  });\n\n  //在挂载前执行获取数据，实现初始化数据显示\n  useEffect(() => {\n    getUsers().then();\n  }, [getUsers]);\n  //[]--组件mount时请求数据;[变量]--变量发生变化，则useEffect会再次运行\n")])])]),t("h3",{attrs:{id:"_3-3-路由跳转与权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-路由跳转与权限"}},[n._v("#")]),n._v(" 3.3 路由跳转与权限")]),n._v(" "),t("h4",{attrs:{id:"_3-3-1-路由跳转"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-路由跳转"}},[n._v("#")]),n._v(" 3.3.1 路由跳转")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import type { IBestAFSRoute } from '@umijs/plugin-layout';\n\nexport const routes: IBestAFSRoute[] = [\n  {\n    path: '/',\n    redirect: '/project',\n  },\n  {\n    path: '/project',\n    component: './Project',\n    name: '项目列表',\n    icon: 'dashboard',\n  },\n  {\n    path: '/vehicle',\n    component: './Vehicle',\n    name: '车辆设置',\n    icon: 'global',\n  },\n  。。。。。\n  {\n    path: '/account',\n    menu: {\n      flatMenu: true,\n      name: '用户',\n    },\n    routes: [\n      {\n        path: '/account/login',\n        component: './Account/Login',\n        layout: false,\n      },\n      {\n        path: '/account/management',\n        component: './Account/Management',\n        name: '用户管理',\n        icon: 'user-switch',\n        access: 'isAdmin',\n      },\n    ],\n  },\n];\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("history：\n//用于保证在刷新页面后，重新定向到刷新前的页面\n if (!history) return;\n  const { query } = history.location; //历史记录里的location对象\n  const { redirect } = query as { redirect: string };\n  history.push(redirect ?? '/');\n")])])]),t("h4",{attrs:{id:"_3-3-2-路由权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-路由权限"}},[n._v("#")]),n._v(" 3.3.2 路由权限")]),n._v(" "),t("p",[n._v("保证只有管理员身份才能显示管理者界面。")]),n._v(" "),t("p",[n._v("1.在路由配置文件config/routes.ts中对需要进行管理的路由界面加上：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('access:"isAdmin"\n')])])]),t("p",[n._v("2.在src文件夹下新建access.ts文件：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("  其中 initialState 是通过初始化状态插件 @umijs/plugin-initial-state 提供的数据，你可以使用该数据来初始化你的用户权限，在青岛项目中，initialState是指src/app.tsx中的InitialStateType类型的数据，它通过getInitialState()返回初始的项目数据。\n\nimport type { InitialStateType } from './app';\n\nexport default function Access(initialState: InitialStateType) {\n\n  //为什么用??{}：在app.tsx文件中，对InitialStateType中的参数为可选参数，所以initialState有可能为undefined，??{}可保证当initialState不为空时就为本身，为空就等于{}\n  const { currentUser } = initialState ?? {};\n\n  return {\n  //为什么用currentUser && 。。。：道理同initialState，currentUser有可能为空，只执行到&&前，isAdmin为false，无权限；当currentUser不为空，继续执行&&后面的代码\n    isAdmin: currentUser && currentUser.roles.includes('管理员'),\n  };\n}\n")])])]),t("h3",{attrs:{id:"_3-4-全局数据共享"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-全局数据共享"}},[n._v("#")]),n._v(" 3.4 全局数据共享")]),n._v(" "),t("p",[n._v("一种基于 hooks 范式的简易数据管理方案（部分场景可以取代 dva），通常用于中台项目的全局共享数据。\n约定在 src/models 目录下的文件为项目定义的 model 文件。每个文件需要默认导出一个 function，该 function 定义了一个 Hook，不符合规范的文件我们会过滤掉。文件名则对应最终 model 的 name，你可以通过插件提供的 API 来消费 model 中的数据。")]),n._v(" "),t("p",[n._v("@umijs/plugin-model 把model文件夹里的状态变成了『全局状态』，多个组件中使用该 model 时，拿到的同一份状态。")]),n._v(" "),t("p",[n._v("/models/vehicle.ts：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import type { VehicleDto } from '@/pages/Vehicle/data';\nimport { useCallback, useState } from 'react';\n\nexport default function useVehicle() {\n  const initialVehicle = JSON.parse(sessionStorage.getItem('vehicle')!) ?? {};\n  const [vehicle, setVehicle] = useState<VehicleDto>(initialVehicle);\n\n  const saveVehicle = useCallback((dto: Partial<VehicleDto>) => {\n    setVehicle((prevState) => ({\n      ...prevState,\n      ...dto,\n    }));\n    sessionStorage.setItem('vehicle', JSON.stringify(dto));\n  }, []);\n\n  return {\n    vehicle,\n    saveVehicle,\n  };\n}\n")])])]),t("p",[n._v("使用：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import { useModel } from '@@/plugin-model/useModel';\n\n const { project } = useModel('project');\n const { vehicle, saveVehicle } = useModel('vehicle');\n \n")])])]),t("p",[n._v("使用案例：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import { useModel } from 'umi';\n export default () => {\n const { user, fetchUser } = useModel('user', model => ({ user: model.user, fetchUser: model.fetchUser }));\n return <>hello</>\n };\n useModel 有两个参数，namespace 和 updater。\n namespace - 就是 hooks model 文件的文件名，如上面例子里的 useAuthModel\n updater - 可选参数。在 hooks model 返回多个状态，但使用组件仅引用了其中部分状态，并且希望仅在这几个状态更新时 rerender 时使用（性能相关）。\n")])])]),t("h3",{attrs:{id:"_3-5-antd与antd-pro"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-antd与antd-pro"}},[n._v("#")]),n._v(" 3.5 antd与antd pro")]),n._v(" "),t("h4",{attrs:{id:"_3-5-1-editableprotable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-1-editableprotable"}},[n._v("#")]),n._v(" 3.5.1 EditableProTable")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//定义公共弹框，点击编辑框出现的弹框\nconst commonProps: ProColumns = {\nalign: 'center',\nvalueType: 'text', //保持输入的数据类型\nformItemProps: {  //弹框组件\n  rules: [\n    {\n      required: true,\n      message: '必填项',\n    },],}, };\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" //函数组件\n  const Manage: React.FC = () => {\n    const [editableKeys, setEditableRowKeys] = useState<React.Key[]>([]); //固定\n    //设置用户数组状态，储存用户信息\n    const [users, setUsers] = useState<UserInfo[]>([]);\n    //获取用户信息\n    const {run: fetchUserList} = useRequest(async () => fetchUsers(1,1000),{...});\n    //删除用户\n    const {run: delteUser} = useRequest(async (id) => deleteUserById(id),{...});\n    //更新用户\n    const {run: updateUser} = useRequest(async (id) => updateUserById(id),{...});\n    //创建用户\n    const {run: createUserCom} = useRequest(async (data) => createUser(data),{...});\n   //初始化获取数据\n    useEffect(() => {\n        fetchUserList().then()\n    }, [])\n  \n//定义列表元素\n const columns: ProColumns<UserInfo>[] = [\n    {\n      title: '编号',\n      renderText: (text, record, index) => index + 1,\n      //renderText是protable自带属性，提供text、record、index属性，record是UserInfo类型，所以record里存的是当前的用户信息，index为每一行索引值。此行代码只用了index，用于给该行内容填充一个值，为index+1\n      width:'10%',\n      editable:false, //是否可编辑\n      ...commonProps, //复用公共弹框\n    },\n    {....},\n    {\n      title: '用户名',\n      dataIndex: 'username', //数据索引\n      width:'30%',\n      //editable:false,\n      ...commonProps,\n    },\n    {\n      title: '操作',\n      valueType: 'option',\n      align: 'center',\n      render: (text, record, index, action) => [\n        \n        <a\n          key='editable'\n          onClick={() => { \n             //固定用法，record.id为UserInfo中的id\n              action?.startEditable?.(record.id)}}>编辑</a>,\n       \n       <a\n          key='delete'\n          onClick={() => {\n            //调用delteUser方法，传入id，这里规定是workNumber，删除用户\n            delteUser(record.workNumber);}}>删除</a>,\n        \n        <a\n        key='reset'\n        onClick={() => {\n        //更新密码为默认值，要求传入UserInfo，所以需...record，再对password赋值，覆盖原来的password\n          updateUser({\n              ...record,\n              password: '1q2w3E*' })}}>重置密码</a>,\n      ],},];\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" return (\n<> //需包含在一个根标签上\n<ProCard  //设置卡片内容与卡片四边的距离\nbodyStyle={{ padding: '0', paddingTop: '24px' }}>\n  <EditableProTable<UserInfo> //加入泛型，在里面打入有关此类型会有提示\n    rowKey='id' //每行key\n    columns={columns} //上面定义的列表元素\n    value={users} //列表要显示的值，传入的参数为用户数组状态\n    onChange={(value) => setUsers(value)}\n    editable={{ //对当前编辑行进行设置\n      type: 'multiple', //多行修改\n      editableKeys,\n      onChange: setEditableRowKeys, //固定\n      onSave: async (_, row) => {  //按保存后触发事件\n         //如果有两个用户信息，index值为0，1；length为2；当需要的是新建一行，index变成0.1.2，等于未上传数据库的length（2），则调用创建用户的方法，随后length变为3\n         if(row.index == users.length){ \n            createUserCom(row);\n         } else {\n         //当需求是更新数据，index依旧为1，length依旧为2，不相等，所以直接调用上传用户的方法\n            updateUser(row);\n         }}}}\n    recordCreatorProps={{\n      record: (index) => ({\n        id: index + 1,\n        } as unknown as UserInfo), //此id赋值为数字，userinfo中为string\n    }}/>\n</ProCard>\n</>)\n")])])]),t("h4",{attrs:{id:"_3-5-2-betaschemaform"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-2-betaschemaform"}},[n._v("#")]),n._v(" 3.5.2 BetaSchemaForm")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import type { Control, ControlDto } from '@/pages/Control/data';\nimport { useModel } from '@@/plugin-model/useModel';\nimport type { ProFormColumnsType } from '@ant-design/pro-form';\nimport { BetaSchemaForm } from '@ant-design/pro-form';\n\n//公共设置\nconst commonProps: ProFormColumnsType = {\n  width: '200px',\n  valueType: 'digit',\n};\n//valueType 是 ProComponents 的灵魂，ProComponents 会根据 valueType 来映射成不同的表单项。\nconst columns: ProFormColumnsType[] = [\n  {\n    valueType: 'group',\n    columns: [\n      {\n        ...commonProps,\n        title: '积分步长',\n        dataIndex: 'ot',\n      },\n      {\n        ...commonProps,\n        title: '初始速度(m/s)',\n        dataIndex: 'initialVelocity',\n      },\n      {\n        ...commonProps,\n        title: '预平衡轨道长度(m)',\n        dataIndex: 'beginDis',\n      },\n      {\n        ...commonProps,\n        title: '运行时间(s)',\n        dataIndex: 'totalTime',\n      },\n      {\n        ...commonProps,\n        title: '总运行距离(m)',\n        dataIndex: 'totalDis',\n      },\n    ],\n  },\n];\n\nexport default ({ control }: { control: ControlDto }) => {\n  const { saveControl } = useModel('control');\n\n  return (\n    <BetaSchemaForm<Control>\n      submitter={false} //提交按钮相关配置\n      layoutType={'Form'}\n      columns={columns}\n      initialValues={control}\n      onValuesChange={saveControl}\n    />\n  );\n};\n")])])]),t("h4",{attrs:{id:"_3-5-3-select"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-3-select"}},[n._v("#")]),n._v(" 3.5.3 Select")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" return (\n    <PageContainer\n      loading={loading}\n      title={`${project.name} - 激励设置`}\n      header={{\n        extra: [<UploadBox type={UploadType.EXCITATION} key={'upload'} />],\n      }}\n    >\n\n      {excitation.id && project.excitationId === excitation.id && (\n        <>\n          <ProCard split={'vertical'}> //卡片分布方式\n            <ProCard title={'车轮多边形参数'} colSpan='60%'>\n              <Select\n                className='a'\n                style={{\n                  width: '120px',\n                  marginRight: '15px',\n                  marginBottom: '15px',\n                }}\n                key={excitation.id}\n                defaultValue={excitation.ptype ?? \"0\"}\n                onSelect={(value) => setpTypes(value)}\n              >\n                <Select.Option value={\"0\"}>无</Select.Option>\n                <Select.Option value={\"1\"}>拟合</Select.Option>\n                <Select.Option value={\"2\"}>实测</Select.Option>\n              </Select>\n              //为1时才显现\n              { excitation.ptype===\"1\"?<PolygonInput excitation={excitation} />:<></>}\n            </ProCard>\n         </ProCard>\n        </>\n      )}\n    </PageContainer>\n  );\n};\n\n")])])]),t("h4",{attrs:{id:"_3-5-4-cascader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-4-cascader"}},[n._v("#")]),n._v(" 3.5.4 Cascader")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import { Cascader } from 'antd';\nimport type { FC } from 'react';\n\n//interface（接口） 是 TS 设计出来用于定义对象类型的，可以对对象的形状进行描述\ninterface Option {\n  value: string | number;\n  label: string;\n  children?: Option[];\n}\n\n//type (类型别名)，顾名思义，类型别名只是给类型起一个新名字。它并不是一个类型，只是一个别名而已\ntype Props = {\n  title: string;\n  onChange: (value: any) => void;\n  option: Option[];\n  value: string[][];\n};\n\nexport const CascaderButton: FC<Props> = ({\n  onChange,\n  title,\n  option,\n  value,\n}) => {\n  return (\n    <>\n      <div>{title}</div>\n      <Cascader\n        style={{ width: '100%', margin: '10px' }}\n        options={option}\n        onChange={onChange}\n        multiple\n        maxTagCount='responsive'\n        showCheckedStrategy={Cascader.SHOW_CHILD}\n        placeholder='请点击选择下载选项'\n        value={value}\n      />\n    </>\n  );\n};\n\n")])])]),t("p",[n._v("interface 和 type 被 TS 设计出来，是完全不同的东西，有各自的职责。")]),n._v(" "),t("p",[n._v("interface 是"),t("strong",[n._v("接口")]),n._v("，用于描述一个对象。")]),n._v(" "),t("p",[n._v("type 是"),t("strong",[n._v("类型别名")]),n._v("，用于给各种类型定义别名，让 TS 写起来更简洁、清晰。")]),n._v(" "),t("p",[n._v("平时开发中，一般"),t("strong",[n._v("使用联合或者交叉类型")]),n._v("的时候，用 type。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("type arrItem = number | string                  // 联合类型\n\nconst arr: arrItem[] = [1,'2', 3]\n\ntype Person = { \n  name: Name \n}\n\ntype Student = Person & { grade: number  }       // 交叉类型\n\ntype Teacher = Person & { major: string  } \n\ntype StudentAndTeacherList = [Student, Teacher]  // 元组类型\n")])])]),t("p",[n._v("一般要用类的 "),t("strong",[n._v("extends")]),n._v(" 或 "),t("strong",[n._v("implements")]),n._v(" 时，用 interface。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Person { \n  name: string \n}\ninterface Student extends Person { \n  grade: number \n}\n\nconst person:Student = {\n  name: 'lin',\n  grade: 100\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("type Person = { \n  name: string \n}\ntype Student = Person & { grade: number  }    用交叉类型\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("type Person = { \n  name: string \n}\n\ninterface Student extends Person { \n  grade: number \n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Person { \n  name: string \n}\n\ntype Student = Person & { grade: number  }    用交叉类型\n")])])]),t("h3",{attrs:{id:"_3-6-组件封装与使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-组件封装与使用"}},[n._v("#")]),n._v(" 3.6 组件封装与使用")]),n._v(" "),t("p",[n._v("封装，cascaderButton.tsx：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//React.FC是函数式组件，是在TypeScript使用的一个泛型\nexport const CascaderButton: FC<Props> = ({\n  onChange,\n  title,\n  option,\n  value,\n}) => {\n  return (\n    <>\n      <div>{title}</div>\n      <Cascader\n        style={{ width: '100%', margin: '10px' }}\n        options={option}\n        onChange={onChange}\n        multiple\n        maxTagCount='responsive'\n        showCheckedStrategy={Cascader.SHOW_CHILD}\n        placeholder='请点击选择下载选项'\n        value={value}\n      />\n    </>\n  );\n};\n\n")])])]),t("p",[n._v("使用，downloadModal.tsx：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" <CascaderButton\n     onChange={(value)=>onChange(value,\"cgzb\")}\n     title={'常规参数 ( 时间、位移、速度 )'}\n     option={cgcs}\n     value={cgzb1}\n     />\n  <CascaderButton\n     onChange={(value)=>onChange(value,\"jsd\")}\n     title={'加速度'}\n     option={jsd}\n     value={jsd1}\n    />\n")])])]),t("h3",{attrs:{id:"_3-7-canvas与fabric-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-canvas与fabric-js"}},[n._v("#")]),n._v(" 3.7 canvas与fabric.js")]),n._v(" "),t("p",[n._v("Canvas提供一个好的画布能力, 但是Api不够友好。绘制简单图形其实还可以, 不过做一些复杂的图形绘制, 编写一些复杂的效果，就不是那么方便了。Fabric.js是一个可以简化Canvas程序编写的库。它主要就是用对象的方式去编写代码。")]),n._v(" "),t("h4",{attrs:{id:"_3-7-1-新建页面并引入-fabric-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-1-新建页面并引入-fabric-js"}},[n._v("#")]),n._v(" 3.7.1 新建页面并引入 Fabric.js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import { fabric } from 'fabric'\n")])])]),t("h4",{attrs:{id:"_3-7-2-创建-canvas-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-2-创建-canvas-容器"}},[n._v("#")]),n._v(" 3.7.2 创建 canvas 容器")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<canvas width="400" height="400" id="c" style="border: 1px solid #ccc;"></canvas>\n')])])]),t("h4",{attrs:{id:"_3-7-3-使用-fabric-接管容器-并画一个矩形"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-3-使用-fabric-接管容器-并画一个矩形"}},[n._v("#")]),n._v(" 3.7.3 使用 fabric 接管容器，并画一个矩形")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<script setup>\nimport { onMounted } from 'vue'\nimport { fabric } from 'fabric' // 引入 fabric\n\nfunction init() {\n  \n  // 这里传入的是canvas的id,和画布配置\n  const canvas = new fabric.Canvas('c'，{\n    width: 300, // 画布宽度\n    height: 300, // 画布高度\n    backgroundColor: '#eee' // 画布背景色\n  }) \n  \n  // 使用 StaticCanvas 创建一个不可操作的画布\n  //const canvas = new fabric.StaticCanvas('canvas') // 这里传入的是canvas元素的id\n \n // 创建一个长方形\n  const rect = new fabric.Rect({\n    top: 30, // 距离容器顶部 30px\n    left: 30, // 距离容器左侧 30px\n    width: 100, // 宽 100px\n    height: 60, // 高 60px\n    fill: 'red' // 填充 红色\n  })\n\n  // 在canvas画布中加入矩形（rect）。add是“添加”的意思\n  canvas.add(rect)\n}\n\n// 需要在页面容器加载完才能开始初始化（页面加载完才找到 canvas 元素）\n// onMounted 是 Vue3 提供的一个页面生命周期函数：实例被挂载后调用。\n// onMounted 官方文档说明：https://v3.cn.vuejs.org/guide/composition-api-lifecycle-hooks.html\nonMounted(() => {\n  init() // 执行初始化函数\n})\n<\/script>\n")])])]),t("p",[t("code",[n._v("new fabric.Canvas")]),n._v(" 的第二个参数是用来设置画布基础功能的。")]),n._v(" "),t("p",[t("strong",[n._v("背景图：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  //设置画布背景图\n  canvas.setBackgroundImage(\n    {\n    source：'https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27d1b4e5f8824198b6d51a2b1c2d0d75~tplv-k3u1fbpfcp-zoom-crop-mark:400:400:400:400.awebp'\n    repeat: 'repeat', //重复背景图\n    }，\n    canvas.renderAll.bind(canvas)，\n    {\n      angle: 15 // 旋转背景图\n      scaleX: canvas.width / img.width, // 计算出图片要拉伸的宽度\n      scaleY: canvas.height / img.height // 计算出图片要拉伸的高度\n    })\n    //第三个参数除了旋转，还可以设置 scaleX、scaleY 之类的操作\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("canvas.setOverlayImage(\n    jailCellBars, // 图片，script开头import进来的\n    canvas.renderAll.bind(canvas)\n    )//背景图叠在图案元素上面\n")])])]),t("p",[t("strong",[n._v("画图形与文本：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" //画矩形\n const rect = new fabric.Rect({\n    top: 100, // 距离容器顶部 100px\n    left: 100, // 距离容器左侧 100px\n    fill: 'orange', // 填充 橙色\n    width: 100, // 宽度 100px\n    height: 100 // 高度 100px\n  })\n  \n  //画圆弧矩形，需要添加 rx 和 ry\n    rx: 20, // x轴的半径\n    ry: 20 // y轴的半径\n  \n  //画圆形\n  const circle = new fabric.Circle({\n    top: 100,\n    left: 100,\n    radius: 50, // 圆的半径 50\n    fill: 'green'\n  })\n  \n  //画椭圆形\n  const ellipse = new fabric.Ellipse({\n    top: 20,\n    left: 20,\n    rx: 70,\n    ry: 30,\n    fill: 'hotpink'\n  })\n  \n  //画三角形\n  const triangle = new fabric.Triangle({\n    top: 100,\n    left: 100,\n    width: 80, // 底边长度\n    height: 100, // 底边到对角的距离\n    fill: 'blue'\n  })\n  \n  //画线段\n  const line = new fabric.Line(\n    [\n      10, 10, // 起始点坐标\n      200, 300 // 结束点坐标\n    ],\n    {\n      stroke: 'red', // 笔触颜色\n    }\n  )\n  \n  //画折线\n   const polyline = new fabric.Polyline([\n    {x: 30, y: 30},\n    {x: 150, y: 140},\n    {x: 240, y: 150},\n    {x: 100, y: 30}\n  ], {\n    fill: 'transparent', // 如果画折线，需要填充透明\n    stroke: '#6639a6', // 线段颜色：紫色\n    strokeWidth: 5 // 线段粗细 5\n  })\n\n  // 画路径\n  const path = new fabric.Path('M 0 0 L 200 100 L 170 200 z')\n  path.set({\n    top: 50, // 距离容器顶部距离 50px\n    left: 50, // 距离容器左侧距离 50px\n    fill: 'hotpink', // 填充 亮粉色\n    opacity: 0.5, // 不透明度 50%\n    stroke: 'black', // 描边颜色 黑色\n    strokeWidth: 10 // 描边粗细 10px\n  })\n  M：可以理解为新的起始点x，y坐标\n  L：每个折点的x，y坐标\n  z：自动闭合（自动把结束点和起始点连接起来）\n\n  //画普通文本\n   const text = new fabric.Text('雷猴啊')\n   \n  //画可编辑文本\n   const itext = new fabric.IText('雷猴啊')\n   \n  //画文本框\n   const textbox = new fabric.Textbox('Lorum ipsum dolor sit amet', {\n    width: 250\n  })\n")])])]),t("p",[n._v("最后**canvas.add(图像)**将图像加入到画布中。")]),n._v(" "),t("p",[t("strong",[n._v("基本样式：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("   图像：\n    top: 100,\n    left: 100,\n    radius: 50, // 半径：50px\n    backgroundColor: 'green', // 背景色：绿色\n    fill: 'orange', // 填充色：橙色\n    stroke: '#f6416c', // 边框颜色：粉色\n    strokeWidth: 5, // 边框粗细：5px\n    strokeDashArray: [20, 5, 14], // 边框虚线规则：填充20px 空5px 填充14px 空20px 填充5px ……\n    shadow: '10px 20px 6px rgba(10, 20, 30, 0.4)', // 投影：向右偏移10px，向下偏移20px，羽化6px，投影颜色及透明度\n    transparentCorners: false, // 选中时，角是被填充了。true 空心；false 实心\n    borderColor: '#16f1fc', // 选中时，边框颜色：天蓝\n    borderScaleFactor: 5, // 选中时，边的粗细：5px\n    borderDashArray: [20, 5, 10, 7], // 选中时，虚线边的规则\n    cornerColor: \"#a1de93\", // 选中时，角的颜色是 青色\n    cornerStrokeColor: 'pink', // 选中时，角的边框的颜色是 粉色\n    cornerStyle: 'circle', // 选中时，叫的属性。默认rect 矩形；circle 圆形\n    cornerSize: 20, // 选中时，角的大小为20\n    cornerDashArray: [10, 2, 6], // 选中时，虚线角的规则\n    selectionBackgroundColor: '#7f1300', // 选中时，选框的背景色：朱红\n    padding: 40, // 选中时，选择框离元素的内边距：40px\n    borderOpacityWhenMoving: 0.6, // 当对象活动和移动时，对象控制边界的不透明度 \n    \n   文本：\n    top: 40,\n    left: 40,\n    fontSize: 120,\n    backgroundColor: 'green', // 背景色：绿色\n    fill: 'orange', // 填充色：橙色\n    stroke: '#f6416c', // 边框颜色：粉色\n    strokeWidth: 3, // 边框粗细：3px\n    strokeDashArray: [20, 5, 14], // 边框虚线规则：填充20px 空5px 填充14px 空20px 填充5px ……\n    shadow: '10px 20px 6px rgba(10, 20, 30, 0.4)', // 投影：向右偏移10px，向下偏移20px，羽化6px，投影颜色及透明度\n    transparentCorners: false, // 选中时，角是被填充了。true 空心；false 实心\n    borderColor: '#16f1fc', // 选中时，边框颜色：天蓝\n    borderScaleFactor: 5, // 选中时，边的粗细：5px\n    borderDashArray: [20, 5, 10, 7], // 选中时，虚线边的规则\n    cornerColor: \"#a1de93\", // 选中时，角的颜色是 青色\n    cornerStrokeColor: 'pink', // 选中时，角的边框的颜色是 粉色\n    cornerStyle: 'circle', // 选中时，叫的属性。默认rect 矩形；circle 圆形\n    cornerSize: 20, // 选中时，角的大小为20\n    cornerDashArray: [10, 2, 6], // 选中时，虚线角的规则\n    selectionBackgroundColor: '#7f1300', // 选中时，选框的背景色：朱红\n    padding: 40, // 选中时，选择框离元素的内边距：40px\n    borderOpacityWhenMoving: 0.6, // 当对象活动和移动时，对象控制边界的不透明度 \n    \n    overline: true, // 上划线\n    underline: true, // 下划线\n    linethrough: true, // 删除线\n    textAlign: 'left', // 左对齐\n    lineHeight: 1, // 行高\n")])])]),t("p",[t("strong",[n._v("放缩")]),n._v(" "),t("strong",[n._v("scaleX 和 scaleY")]),n._v("：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    scaleX: 2, // x轴方向放大2倍\n    scaleY: 2 // y轴方向放大2倍\n    scaleY: -1 // scale是负数时，图形会反转\n")])])]),t("p",[t("strong",[n._v("操作组：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("   getObjects() 返回一组中所有对象的数组\n   size() 所有对象的数量\n   contains() 检查特定对象是否在 group 中\n   item() 组中元素\n   forEachObject() 遍历组中对象\n   add() 添加元素对象\n   remove() 删除元素对象\n   fabric.util.object.clone() 克隆\n")])])]),t("p",[t("strong",[n._v("缩放画布：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("   let zoom = canvas.getZoom() // 获取画布当前缩放值\n   canvas.setZoom(zoom)// 设置画布缩放比例\n   \n   // 设置画布缩放比例\n   // 关键点！！！\n   // 参数1：将画布的所放点设置成鼠标当前位置\n   // 参数2：传入缩放值\n   canvas.zoomToPoint(\n      {\n        x: opt.e.offsetX, // 鼠标x轴坐标\n        y: opt.e.offsetY  // 鼠标y轴坐标\n      },\n      zoom // 最后要缩放的值\n    )\n  })\n")])])]),t("p",[t("strong",[n._v("序列化：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  console.log('canvas stringify ', JSON.stringify(canvas))\n  \n  // 提供了 toJSON 和 toObject 两个方法，把画布及内容转换成 JSON\n  console.log('canvas toJSON', canvas.toJSON())\n  console.log('canvas toObject', canvas.toObject())\n  \n  console.log('toPng', canvas.toDataURL('png')) // 在控制台输出 png（base64）\n  canvas.requestRenderAll()\n  使用 canvas.toDataURL('png') 可以输出 png 图片。但这个操作可能会打断 canvas 的渲染，所以之后要再执行以下 canvas.requestRenderAll() 。\n  \n  输出 SVG 很简单，直接调用 canvas.toSVG() 即可。\n  \n  使用 canvas.loadFromJSON() 可以进行反序列化，里面传入一个 JSON格式 的字符串 即可\n")])])]),t("h4",{attrs:{id:"_3-7-4-项目中运用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-4-项目中运用"}},[n._v("#")]),n._v(" 3.7.4 项目中运用")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("rect = objects[i].getBoundingRect();//返回相对于左上角的left、top、width、height\ncanvas.absolutePan({ x: panX, y: panY });//平移画布至xy点\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import type { HorizontalTrack, Vector2 } from '@/pages/Track/data';\nimport { STROKE_WIDTH, zoomToCenter } from '@/utils/canvas';\nimport { useModel } from '@@/plugin-model/useModel';\nimport { fabric } from 'fabric';\nimport React, { useEffect } from 'react';\n\ntype Props = {\n  horizontalTrack?: HorizontalTrack[];\n  width: number;\n  height: number;\n};\n\ntype EndPointInfo = {\n  position: Vector2; // 终点的坐标\n  slopeAngle: number; // 终点所在线（对于曲线，对应的是终点的切线）与水平方向的夹角\n};\n\n/**\n * 根据上一段曲线终点的信息以及当前曲线的信息生成当前曲线对应的 fabric 对象（直线，圆）以及当前曲线终点的信息\n * @param startPointInfo 上一段曲线终点的信息，当前曲线起点的信息\n * @param line 当前曲线的信息\n * @returns [生成的 fabric 对象，当前曲线终点的信息]\n */\nfunction calcNext(\n  startPointInfo: EndPointInfo,\n  line: HorizontalTrack\n): [fabric.Object, EndPointInfo] {\n  if (line.radius === 0) {\n    const endPointInfo = {\n      position: {\n        x:\n          startPointInfo.position.x +\n          line.length * Math.cos(startPointInfo.slopeAngle),\n        y:\n          startPointInfo.position.y +\n          line.length * Math.sin(startPointInfo.slopeAngle),\n      },\n      slopeAngle: startPointInfo.slopeAngle,\n    };\n    //根据初始和终点画弦\n    const curvy = new fabric.Line(\n      [\n        startPointInfo.position.x,\n        startPointInfo.position.y,\n        endPointInfo.position.x,\n        endPointInfo.position.y,\n      ],\n      {\n        fill: 'red',\n        stroke: 'red',\n        strokeWidth: STROKE_WIDTH,\n      }\n    );\n\n    return [curvy, endPointInfo];\n  }\n\n  // 垂线对应的角度\n  const angle = Math.PI / 2 + startPointInfo.slopeAngle;\n  // 曲线圆心的坐标\n  const centerPoint: Vector2 = {\n    x: startPointInfo.position.x + line.radius * Math.cos(angle),\n    y: startPointInfo.position.y + line.radius * Math.sin(angle),\n  };\n  // 曲线的弧度\n  const radian = line.length / line.radius;\n  // 圆心与圆弧终点连线的角度\n  const endLineAngle = startPointInfo.slopeAngle + radian - Math.PI / 2;\n  // 圆弧终点的坐标\n  const endPoint: Vector2 = {\n    x: centerPoint.x + line.radius * Math.cos(endLineAngle),\n    y: centerPoint.y + line.radius * Math.sin(endLineAngle),\n  };\n  // 圆弧终点处切线的角度\n  const endAngle = endLineAngle + Math.PI / 2;\n\n  const endPointInfo = {\n    position: endPoint,\n    slopeAngle: endAngle,\n  };\n  const curvy = new fabric.Circle({\n    left: centerPoint.x,\n    top: centerPoint.y,\n    radius: line.radius,\n    fill: '#eee',\n    strokeWidth: STROKE_WIDTH,\n    stroke: 'red',\n    startAngle: Math.PI + angle,\n    endAngle: endLineAngle,\n  });\n\n  return [curvy, endPointInfo];\n}\n\nconst HorizontalTrackRender: React.FC<Props> = (props) => {\n  const canvasRef = React.createRef<HTMLCanvasElement>();\n  const { track } = useModel('track');\n\n  useEffect(() => {\n    const data = props.horizontalTrack ?? track.horizontalTracks ?? [];\n\n    const canvas = new fabric.Canvas(canvasRef.current, {\n      width: props.width,\n      height: props.height,\n      selection: false,\n      backgroundColor: '#eee',\n    });\n\n    let currentEndPoint: EndPointInfo = {\n      position: {\n        x: 150,\n        y: 200,\n      },\n      slopeAngle: 0,\n    };\n\n    for (let i = 0; i < data.length; i += 1) {\n      const line = data[i];\n      const [curvy, endPointInfo] = calcNext(currentEndPoint, line);\n      canvas.add(curvy);\n      currentEndPoint = endPointInfo;\n    }\n    zoomToCenter(canvas);//对画布进行放缩平移，使之位于合适位置\n  }, [track, canvasRef, props.horizontalTrack, props.width, props.height]);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default HorizontalTrackRender;\n\n")])])]),t("p",[n._v("图像的自适应可参考"),t("a",{attrs:{href:"https://www.hangge.com/blog/cache/detail_1861.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("Fabric.js - 画布视图viewport的自适应（内容自动缩放并居中） (hangge.com)"),t("OutboundLink")],1)]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import { fabric } from 'fabric';\n\nfabric.Object.prototype.originX = 'center';\nfabric.Object.prototype.originY = 'center';\nfabric.Object.prototype.selectable = false;\n\nexport const STROKE_WIDTH = 2;\nexport const FONT_SIZE = 20;\n\nexport function zoomToCenter(canvas: fabric.Canvas) {\n  const canvasWidth = canvas.width!;\n  const canvasHeight = canvas.height!;\n\n  const objects = canvas.getObjects();\n  if (objects.length === 0) return;\n\n  // 寻找图像边界\n  let rect = objects[0].getBoundingRect();\n  let minX = rect.left;\n  let minY = rect.top;\n  let maxX = rect.left + rect.width;\n  let maxY = rect.top + rect.height;\n  for (let i = 1; i < objects.length; i += 1) {\n    rect = objects[i].getBoundingRect();\n    minX = Math.min(minX, rect.left);\n    minY = Math.min(minY, rect.top);\n    maxX = Math.max(maxX, rect.left + rect.width);\n    maxY = Math.max(maxY, rect.top + rect.height);\n  }\n\n  // 平移\n  const panX = (maxX - minX - canvasWidth) / 2 + minX;\n  const panY = (maxY - minY - canvasHeight) / 2 + minY;\n  canvas.absolutePan({ x: panX, y: panY });\n\n  // 缩放\n  const zoom = Math.min(\n    (canvasWidth - 50) / (maxX - minX),\n    (canvasHeight - 50) / (maxY - minY)\n  );\n  const zoomPoint = new fabric.Point(canvasWidth / 2, canvasHeight / 2);\n  canvas.zoomToPoint(zoomPoint, zoom);\n\n  // 重新设置线条宽度\n  objects.forEach((o) => {\n    // eslint-disable-next-line no-param-reassign\n    o.strokeWidth = o.strokeWidth! / zoom;\n  });\n}\n\n")])])]),t("h2",{attrs:{id:"四、后处理模块零碎知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、后处理模块零碎知识"}},[n._v("#")]),n._v(" 四、后处理模块零碎知识")])])}),[],!1,null,null,null);e.default=s.exports}}]);