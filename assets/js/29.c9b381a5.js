(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{566:function(t,a,e){"use strict";e.r(a);var s=e(6),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_1-react和vue的数据监听"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-react和vue的数据监听"}},[t._v("#")]),t._v(" 1. react和vue的数据监听")]),t._v(" "),e("p",[t._v("**react：**16之前使用"),e("code",[t._v("componentWillReveiveProps")]),t._v("来监听"),e("code",[t._v("props")]),t._v("的变换，16之后使用新出的"),e("code",[t._v("getDerivedStateFromProps")]),t._v("进行props的监听。")]),t._v(" "),e("p",[t._v("React默认是通过"),e("strong",[t._v("比较引用的方式（diff）进行的")]),t._v("，如果不优化可能导致大量不必要的VDOM的重新渲染。为什么React不精确监听数据变化呢？这是因为Vue和React设计理念上的区别，Vue使用的是可变数据，而React更强调数据的不可变，"),e("strong",[t._v("React 本身只解决视图层")]),t._v("。React 的状态都是**手动 setState 变化的，React 不监听数据变化。**两者没有好坏之分，Vue更加简单，而React构建大型应用的时候更加鲁棒。")]),t._v(" "),e("p",[t._v("**vue：**依靠的是"),e("code",[t._v("watch")]),t._v("。Vue通过 getter/setter以及一些函数的劫持，能精确知道数据变化。")]),t._v(" "),e("h2",{attrs:{id:"_2-rn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-rn"}},[t._v("#")]),t._v(" 2. RN")]),t._v(" "),e("p",[t._v("它被设计为用"),e("strong",[t._v("可重复使用的组件")]),t._v("构建本地移动应用程序。它使用了大量的ReactJS组件，但"),e("strong",[t._v("在不同的设备上以原生方式实现它们")]),t._v("。它调用Objective-C（用于iOS）和Java（用于Android）中的本地渲染API。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("语法")]),t._v("。React Native和ReactJS都使用JSX，但ReactJS使用HTML标签，而React Native不使用。")]),t._v(" "),e("li",[e("strong",[t._v("导航")]),t._v("。React Native使用自己的内置导航库，而ReactJS使用react-router。")]),t._v(" "),e("li",[e("strong",[t._v("动画")]),t._v("。ReactJS使用CSS动画。React Native使用其动画API（animated）")]),t._v(" "),e("li",[e("strong",[t._v("DOM")]),t._v("。ReactJS使用部分刷新的虚拟DOM。React Native在渲染UI组件时需要使用其本地API。")]),t._v(" "),e("li",[e("strong",[t._v("用法")]),t._v("。ReactJS主要用于Web应用开发，而React Native则专注于移动应用。")])]),t._v(" "),e("h3",{attrs:{id:"_2-1-rn常用组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-rn常用组件"}},[t._v("#")]),t._v(" 2.1 rn常用组件")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("REACT NATIVE UI 组件")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("ANDROID 原生视图")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("IOS 原生视图")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("WEB 标签")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<View>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("一个支持使用flexbox布局、样式、一些触摸处理和无障碍性控件的容器")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<ViewGroup>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<UIView>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A non-scrolling "),e("code",[t._v("<div>")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<Text>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("显示、样式和嵌套文本字符串，甚至处理触摸事件")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<TextView>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<UITextView>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<p>")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<Image>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("显示不同类型的图片")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<ImageView>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<UIImageView>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<img>")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<ScrollView>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("一个通用的滚动容器，可以包含多个组件和视图")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<ScrollView>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<UIScrollView>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<div>")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<TextInput>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("使用户可以输入文本")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<EditText>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<UITextField>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v('<input type="text">')])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<FlatList>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("显示一个垂直的滚动列表，其中的元素之间结构近似而仅数据不同")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将extraData={this.state}传递给FlatList时，我们确保当所选状态发生变化时，它将重新渲染自己。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}}),t._v(" "),e("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<SectionList>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("渲染的是一组需要分组的数据，也许还带有分组标签的")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}}),t._v(" "),e("td",{staticStyle:{"text-align":"left"}}),t._v(" "),e("td",{staticStyle:{"text-align":"left"}})])])]),t._v(" "),e("h3",{attrs:{id:"_2-2-rn检测平台"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-rn检测平台"}},[t._v("#")]),t._v(" 2.2 RN检测平台")]),t._v(" "),e("p",[e("code",[t._v("Platform.OS")]),t._v("在 iOS 上会返回"),e("code",[t._v("ios")]),t._v("，而在 Android 设备或模拟器上则会返回"),e("code",[t._v("android")]),t._v("。")]),t._v(" "),e("p",[t._v("Platform.select()，它可以以 Platform.OS 为 key，从传入的对象中返回对应平台的值")]),t._v(" "),e("p",[t._v("当不同平台的代码逻辑较为复杂时，最好是放到不同的文件里，这时候我们可以使用"),e("strong",[t._v("特定平台后缀")]),t._v("。去掉平台后缀直接引用")]),t._v(" "),e("h3",{attrs:{id:"_2-3-rn优点和缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-rn优点和缺点"}},[t._v("#")]),t._v(" 2.3 RN优点和缺点")]),t._v(" "),e("p",[t._v("优点：")]),t._v(" "),e("p",[t._v("1：性能方面媲美原生App。")]),t._v(" "),e("p",[t._v("2：绝大部分代码同时适用IOS/Android，一套代码两系统适用。")]),t._v(" "),e("p",[t._v("3：使用Javascript编码，上手容易。")]),t._v(" "),e("p",[t._v("4：组件式开发，易于管理维护，代码复用率高。")]),t._v(" "),e("p",[t._v("5：代码更改后会自动刷新，节省等待时间。")]),t._v(" "),e("p",[t._v("6：支持热更新，更新无需重新安装App。")]),t._v(" "),e("p",[t._v("缺点：")]),t._v(" "),e("p",[t._v("1：编程方面， "),e("code",[t._v("ios")]),t._v("和"),e("code",[t._v("android")]),t._v("代码并非通用，有可能需要维护两套代码或者在代码中做一些条件判断或编译；")]),t._v(" "),e("p",[t._v("2：开发复杂应用必须精通原生开发，开发效率并不比原生开发的熟手快")]),t._v(" "),e("p",[t._v("3：性能方面也无法媲美原生。")]),t._v(" "),e("h3",{attrs:{id:"_2-4-调用setstate之后发生了什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-调用setstate之后发生了什么"}},[t._v("#")]),t._v(" 2.4 调用setState之后发生了什么？")]),t._v(" "),e("p",[t._v("1：将传入的参数对象与当前的状态合并，然后触发调和过程。")]),t._v(" "),e("p",[t._v("2：在调和过程中react会根据新的状态以相对高效的方式构建react元素树。")]),t._v(" "),e("p",[t._v("3：react会对新旧元素树进行diff算法计算出差异，然后根据差异进行最小化渲染。")]),t._v(" "),e("h3",{attrs:{id:"_2-5-js如何与原生相互调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-js如何与原生相互调用"}},[t._v("#")]),t._v(" 2.5 JS如何与原生相互调用")]),t._v(" "),e("p",[t._v("JS调用原生方法：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("第一种：和原生约定好，通过原生劫持JS发出的请求进行原生调用。")])]),t._v(" "),e("li",[e("p",[t._v("第二种：webView添加要调用的原生方法接口，直接调用。（使用 "),e("strong",[e("code",[t._v("注入 API")])]),t._v(" 的方式）")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/16021827-735ac5d1a2b442db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp",alt:"img"}})])]),t._v(" "),e("li",[e("p",[t._v("第三种：利用第三方库实现，如Andriod第三方库 JSBridge。安全便捷。")])])]),t._v(" "),e("p",[t._v("原生调用js")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("第一种：直接使用webView.evaluateJavacript()实现。（直接执行拼接好的 "),e("code",[t._v("JavaScript")]),t._v(" 代码即可。）")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/16021827-e1957f6297e0b0e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp",alt:"img"}})])]),t._v(" "),e("li",[e("p",[t._v("第二种：利用三方库，如JSBridge来实现。")])])]),t._v(" "),e("h3",{attrs:{id:"_2-6-rn缓存用的是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-rn缓存用的是什么"}},[t._v("#")]),t._v(" 2.6 RN缓存用的是什么")]),t._v(" "),e("p",[t._v("AsyncStorage 它是一个简单的、"),e("strong",[t._v("异步的")]),t._v("、持久化的键值对存储系统，它对于App来说是全局的。可以用来"),e("strong",[t._v("替代LocalStorage")]),t._v("。")]),t._v(" "),e("p",[t._v("在IOS上，AsyncStorage 在原生端的实现是把较小值存放在"),e("strong",[t._v("序列化的字典中")]),t._v("，而把较大值写入单独的"),e("strong",[t._v("文件")]),t._v("。")]),t._v(" "),e("p",[t._v("在Android上，AsyncStorage会尝试使用"),e("strong",[t._v("RocksDB,或退而选择SQLite")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"_2-7-bundle-加载机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-bundle-加载机制"}},[t._v("#")]),t._v(" 2.7 bundle 加载机制")]),t._v(" "),e("p",[t._v("在编写业务逻辑的时候，我们会有许多个js文件，打包的时候RN会将这些个js文件打包成一个叫index.android.bundle(ios的是index.ios.bundle)的文件，所有的js代码(包括rn源代码、第三方库、业务逻辑代码)都在这一个文件里，启动App时会第一时间加载bundle文件，所以脚本热更新要做的事情就是替换掉这个bundle文件。")]),t._v(" "),e("h3",{attrs:{id:"_2-8-webview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-webview"}},[t._v("#")]),t._v(" 2.8 webview")]),t._v(" "),e("p",[t._v("**Webview 是一个基于webkit的引擎，可以解析DOM 元素，展示html页面。**手机系统层面，如果没有webview支持，是无法展示html页面。")]),t._v(" "),e("p",[t._v("**执行过程：**一个原生应用调用html页面过程中使用webview进行渲染展示。有时候可能还需要交互，比如html界面的按钮需要调用系统原生的api（比如：拍照，系统的文件，相册之类的）。原生端就负责维护html调用的接口，然后按照需要返回（原生端充当一个server的角色，html充当一个client角色）。")]),t._v(" "),e("p",[t._v("**好处：**促使RN、flutter等跨端技术的发展。通过webview方式的页面则只需要修改html代码或者js文件（如果是从服务器端获取，只要新的文件部署完成），用户重新刷新就可以使用更新后的，"),e("strong",[t._v("无需通过下载安装")]),t._v("的方式完成升级。")]),t._v(" "),e("h2",{attrs:{id:"_3-微前端沙箱-见微前端专题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-微前端沙箱-见微前端专题"}},[t._v("#")]),t._v(" 3. 微前端沙箱（见微前端专题）")]),t._v(" "),e("h2",{attrs:{id:"_4-栈内存比堆快"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-栈内存比堆快"}},[t._v("#")]),t._v(" 4. 栈内存比堆快")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("申请速度快")]),t._v("：栈是程序运行前就已经分配好的空间（编译时分配空间），所以运行时分配几乎不需要时间。堆是运行时"),e("strong",[t._v("malloc动态分配的")]),t._v("，"),e("strong",[t._v("动态分配的速度不仅与分配算法有关，还与机器运行速度有关")]),t._v("。 且malloc还需要动态的回收垃圾空间，一定程度上影响运行速度")]),t._v(" "),e("li",[e("strong",[t._v("存储寻址速度快")]),t._v("：栈的"),e("strong",[t._v("物理地址空间是连续的")]),t._v("，而堆未必，查找堆的链表也会耗费较多时间，所以存储寻址速度慢。")]),t._v(" "),e("li",[e("strong",[t._v("CPU硬件操作速度快")]),t._v("：cpu有专门的寄存器("),e("strong",[t._v("rsp")]),t._v("，"),e("strong",[t._v("rbp")]),t._v("）来操作栈，堆是使用间接寻址的，所以栈快。")])]),t._v(" "),e("p",[e("strong",[t._v("栈的地址空间必须连续")]),t._v("，如果任其任意成长，会给内存管理带来困难。对于"),e("strong",[t._v("多线程程序")]),t._v("来说，"),e("strong",[t._v("每个线程都必须分配一个栈，因此没办法让默认值太大。")])]),t._v(" "),e("h2",{attrs:{id:"_5-java和js类继承的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-java和js类继承的区别"}},[t._v("#")]),t._v(" 5. Java和JS类继承的区别")]),t._v(" "),e("p",[t._v("继承是面向对象软件技术的一个概念")]),t._v(" "),e("h3",{attrs:{id:"_5-1-java继承机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-java继承机制"}},[t._v("#")]),t._v(" 5.1 java继承机制")]),t._v(" "),e("p",[t._v("java里的类不能多重继承，如果一个类一旦继承了它的父类，那么它就别想再继承别的类。")]),t._v(" "),e("p",[t._v("使用 Java 或 c#等面向对象编程语言开发时 ，实现类的继承都通过关键字 extends 实现继承关系。")]),t._v(" "),e("h3",{attrs:{id:"_5-2-js继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-js继承"}},[t._v("#")]),t._v(" 5.2 js继承")]),t._v(" "),e("p",[t._v("JavaScript 发生继承关系后，我们访问一个对象属性时，它会在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到搜索到名字匹配的属性。")]),t._v(" "),e("p",[t._v("通过extends 对子构造函数.prototype = new 父构造函数，这样进行底层封装处理了")]),t._v(" "),e("h2",{attrs:{id:"_6-框架中对ssr渲染的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-框架中对ssr渲染的实现"}},[t._v("#")]),t._v(" 6. 框架中对SSR渲染的实现")]),t._v(" "),e("p",[t._v("针对于多页面应用，MPA。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("每个页面都有head，SEO好；")])]),t._v(" "),e("li",[e("p",[t._v("每个页面都是服务器渲染，稳定性好，首屏渲染好。不像spa，需要加载js脚本，阻塞渲染。")])]),t._v(" "),e("li",[e("p",[t._v("浏览器直接解析css来绘制ui，不是通过js。渲染快。")])]),t._v(" "),e("li",[e("p",[t._v("但是每一次跳转都要重新请求服务器，刷新ui，可能会有一瞬间的白屏。服务器压力也大。")])]),t._v(" "),e("li",[e("p",[t._v("React: Next.js")])]),t._v(" "),e("li",[e("p",[t._v("Vue: Nuxt.js")])])]),t._v(" "),e("h3",{attrs:{id:"_6-1-ssr优劣与应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-ssr优劣与应用场景"}},[t._v("#")]),t._v(" 6.1 SSR优劣与应用场景")]),t._v(" "),e("p",[t._v("使用的应用场景：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("SEO")]),t._v(" 对应用程序至关重要，但你的页面又是异步请求数据时（数据同步的）")]),t._v(" "),e("li",[e("strong",[t._v("首屏渲染")]),t._v("时间转化率对应用程序至关重要时（传统 SPA 需完整的 JS 下载完成才可执行，而SSR 服务器渲染标记在服务端渲染 html 后即可显示）")])]),t._v(" "),e("p",[t._v("不适用的场景：")]),t._v(" "),e("p",[t._v("结合 Vue 的钩子来说，能在 SSR 中调用的生命周期只有 "),e("strong",[t._v("beforeCreate")]),t._v(" 和 "),e("strong",[t._v("created")]),t._v("。在三方库的引用时需要特殊处理使其支持服务端和客户端都可运行。")]),t._v(" "),e("p",[t._v("劣势在于运行环境单一。程序需处于 "),e("strong",[t._v("node.js server")]),t._v(" 运行环境")]),t._v(" "),e("p",[t._v("高流量场景需服务端进行采取缓存策略。应用"),e("strong",[t._v("代码需在双端运行解析")]),t._v("，cpu 性能消耗更大，"),e("strong",[t._v("负载均衡和多场景缓存处理比 SPA 做更多准备")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"_6-2-vuessr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-vuessr"}},[t._v("#")]),t._v(" 6.2 VueSSR")]),t._v(" "),e("h3",{attrs:{id:"_6-3-reactssr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-reactssr"}},[t._v("#")]),t._v(" 6.3 ReactSSR")]),t._v(" "),e("p",[t._v("简单的 "),e("code",[t._v("SSR")]),t._v(" 其实实现很简单，只需要在服务端导入要渲染的组件，然后调用 "),e("code",[t._v("react-dom/server")]),t._v(" 包中提供的 "),e("code",[t._v("renderToString")]),t._v(" 方法将该组件的渲染内容输出为字符串后返回客户端即可。")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("React")]),t._v(" 中的 "),e("code",[t._v("SSR")]),t._v(" 可以通过 "),e("strong",[t._v("renderToString")]),t._v("来实现，但是只能"),e("strong",[t._v("输出静态内容")]),t._v("，要让页面"),e("strong",[t._v("支持交互")]),t._v("需要搭配 "),e("strong",[t._v("hydrate")]),t._v("使用。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务端输出")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ServerApp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../../dist/ServerApp.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" AppString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ReactDOMServer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("renderToString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ServerApp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 客户端接入,在服务端写的：")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" htmlTemplate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'客户端模板地址'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newHtml "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("htmlTemplate。replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\x3c!--app--\x3e'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("AppString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("express"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("static")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../../dist/bundle.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 托管静态文件")]),t._v("\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newHtml"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("实现 "),e("code",[t._v("SSR")]),t._v(" 时服务端需要支持 "),e("code",[t._v("jsx")]),t._v(" 语法的解析，因为服务端也需要读取组件。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("hydrate")]),t._v(" 会检查服务端与客户端的内容是否匹配。")])]),t._v(" "),e("li",[e("p",[t._v("要实现"),e("strong",[t._v("动态数据")]),t._v("需要在客户端与服务端之间做好如何使用"),e("strong",[t._v("初始 props 的约定")]),t._v("。")])])]),t._v(" "),e("h2",{attrs:{id:"_7-service-worker-离线存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-service-worker-离线存储"}},[t._v("#")]),t._v(" 7. service worker（离线存储）")]),t._v(" "),e("p",[t._v("一个介于客户端和服务器之间的一个代理服务器。在 Service Worker 中我们可以拦截客户端的请求、向客户端发送消息、向服务器发起请求等等，其中最重要的作用之一就是离线资源缓存。Service Worker 可以使你的应用先访问本地缓存资源，包括js、css、png、json等多种静态资源。")]),t._v(" "),e("ul",[e("li",[t._v("独立于主JavaScript线程（这就意味着它的运行丝毫不会影响我们主进程的加载性能），基于webworker，增加了离线缓存。")]),t._v(" "),e("li",[t._v("cacheStorage 接口表示 Cache 对象的储存，配合 service worker 来实现资源的缓存")]),t._v(" "),e("li",[t._v("设计完全异步,大量使用Promise（因为通常Service Worker通常会等待响应后继续，Promise再合适不过了）")]),t._v(" "),e("li",[t._v("不能访问DOM，不能使用XHR和localStorage，但能访问indexDB")]),t._v(" "),e("li",[t._v("Service Worker只能由HTTPS承载(出于安全考虑)")])]),t._v(" "),e("h2",{attrs:{id:"_8-渐进式pwa-通过某种方式达到离线使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-渐进式pwa-通过某种方式达到离线使用"}},[t._v("#")]),t._v(" 8. 渐进式pwa（通过某种方式达到离线使用）")]),t._v(" "),e("p",[t._v("它只是一个运行在浏览器上且使用了一些增强特性的普通网站")]),t._v(" "),e("ul",[e("li",[t._v("安装到你的手机桌面上（manifest.json中配置标题，图表等）")]),t._v(" "),e("li",[t._v("离线访问（service worker）")]),t._v(" "),e("li",[t._v("使用摄像头")]),t._v(" "),e("li",[t._v("通知推送")]),t._v(" "),e("li",[t._v("后台同步")])]),t._v(" "),e("h2",{attrs:{id:"_9-canvas绘图和dom绘图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-canvas绘图和dom绘图"}},[t._v("#")]),t._v(" 9. canvas绘图和dom绘图")]),t._v(" "),e("ul",[e("li",[t._v("dom采用的是"),e("strong",[t._v("驻留模式")]),t._v("，所谓驻留模式可以简单理解为，将一系列的简单（因而dom的布局）的api(html, css, js)等转化为存储在内存中的复杂的模型，这个模型指导绘图指令进行绘制。当使用的DOM元素越多，对内存的消耗也就越大，性能越差。")]),t._v(" "),e("li",[t._v("canvas采用"),e("strong",[t._v("快速模式")]),t._v("，程序员需要使用API直接调用绘图指令，并且需要关心绘图模型，刷新频率等。快速模式很快速，并且灵活，但是相对于驻留模式需要关注的更多。canvas在操作方面比dom要差，只能给整个dom添加事件，并且只能通过脚本来操作。适合像素处理，动态渲染和大数据量，小面积的绘制。canvas绘制的图形都是一个一个像素点构成的。")]),t._v(" "),e("li",[t._v("SVG是一套独立的矢量图形语言，相比canvas 更方便做动态交互，因为svg是基于矢量的，因此放大缩小不会产生锯齿或者模糊，适合用来做高保真的图。与canvas相反，svg可以使用脚本和css来控制，适合少数量，大面积的图形绘制。相对于canvas， svg的技术更加成熟。")])]),t._v(" "),e("h2",{attrs:{id:"_10-垃圾回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-垃圾回收"}},[t._v("#")]),t._v(" 10. 垃圾回收")]),t._v(" "),e("p",[t._v("v8引擎内存限制：")]),t._v(" "),e("p",[t._v("在Javascript中，当我们创建变量时，系统会给对象进行"),e("strong",[t._v("自动分配")]),t._v("对应的内存空间以及闲置资源回收。")]),t._v(" "),e("p",[t._v("简单数据类型内存在栈内存中，引用数据类型内存在堆内存中。")]),t._v(" "),e("p",[t._v("回收策略（2种）：")]),t._v(" "),e("ol",[e("li",[e("p",[e("strong",[t._v("标记清除")])]),t._v(" "),e("p",[t._v("遍历堆内存上所有对象，打上标记。代码执行后，所有使用过的变量取消标记。在清除阶段清空所有还有标记的变量。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cae628622e794fcdaba8012668c44385~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",alt:"未命名文件 (5).png"}})]),t._v(" "),e("p",[t._v("优点：简单；缺点：未清理的变量位置不变，会导致内存碎片化，影响存储较大内存的变量。可进行"),e("strong",[t._v("标记整理算法")]),t._v("解决碎片化问题")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("引用计数")]),t._v("（不常用）")]),t._v(" "),e("p",[t._v("对每个值都记录其的引用次数。变量声明并赋值+1；变量被其他变量引用+1；其他变量的引用换成其他-1；变量为null-1；引用次数为0则被清空。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此对象的引用计数为 1（a引用）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a \t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此对象的引用计数是 2（a,b引用）")]),t._v("\na "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("  \t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此对象的引用计数为 1（b引用）")]),t._v("\nb "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" \t \t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此对象的引用计数为 0（无引用）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\t\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GC 回收此对象")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("分代式垃圾回收")]),t._v(" "),e("p",[t._v("大多数浏览器都是基于标记清除算法，频率具有差异。V8 中对垃圾回收机制的优化。V8 的垃圾回收策略主要基于分代式垃圾回收机制，**V8 中将堆内存分为新生代和老生代两区域，**采用不同的垃圾回收器也就是不同的策略管理垃圾回收。")])])]),t._v(" "),e("p",[e("strong",[t._v("新生代内存回收")])]),t._v(" "),e("p",[t._v("新生代的对象为存活时间较短的对象，简单来说就是新产生的对象，通常只支持 1～8M 的容量。")]),t._v(" "),e("p",[t._v("在64操作系统下分配为32MB。Scavenge 算法：将新生代内存进行一分为二，正在被使用的内存空间称为使用区，而限制状态的内存空间称为空闲区。")]),t._v(" "),e("ul",[e("li",[t._v("新加入的对象都会存放在使用区，当使用区快写满时就进行一次垃圾清理操作。")]),t._v(" "),e("li",[t._v("在开始进行垃圾回收时，新生代回收器会对使用区内的对象进行标记")]),t._v(" "),e("li",[t._v("标记完成后，需要对"),e("strong",[t._v("使用区内的活动对象拷贝到空闲区")]),t._v("进行排序")]),t._v(" "),e("li",[t._v("而后进入垃圾清理阶段，将"),e("strong",[t._v("非活动对象")]),t._v("占用的内存空间进行清理")]),t._v(" "),e("li",[t._v("最后对"),e("strong",[t._v("使用区和空闲区进行交换")]),t._v("，使用区->空闲区，空闲区->使用区")]),t._v(" "),e("li",[t._v("新生代中的变量如果经过回收之后依然一直存在（经历过一次Scavenge算法回收），那么会放入到老生代内存中。")])]),t._v(" "),e("p",[e("strong",[t._v("老生代内存回收")])]),t._v(" "),e("p",[t._v("老生代的对象为存活事件较长或常驻内存的对象，简单来说就是经历过新生代垃圾回收后还存活下来的对象，容量通常比较大。")]),t._v(" "),e("p",[t._v("大内存的老生代：Mark-Sweep（标记清除）和Mark-Compact（标记整理）的策略")]),t._v(" "),e("p",[t._v("标记阶段：递归遍历这组根元素，遍历过程中能到达的元素称为活动对象，没有到达的元素就可以判断为非活动对象。")]),t._v(" "),e("p",[t._v("清除阶段：直接将非活动对象，也就是数据清理掉")]),t._v(" "),e("p",[t._v("整理阶段：标记整理策略进行优化内存碎片")])])}),[],!1,null,null,null);a.default=v.exports}}]);