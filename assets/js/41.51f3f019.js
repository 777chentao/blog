(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{576:function(t,a,s){"use strict";s.r(a);var _=s(6),v=Object(_.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-unity的坐标系-坐标映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-unity的坐标系-坐标映射"}},[t._v("#")]),t._v(" 1. unity的坐标系，坐标映射")]),t._v(" "),s("p",[t._v("unity: 世界坐标系、本地坐标系（物体中心）、屏幕坐标系（左下角）、视口坐标系（左下角，摄像机）")]),t._v(" "),s("p",[t._v("unity的屏幕坐标系：原点在左下角，向右x正方向，向上y正方向")]),t._v(" "),s("p",[t._v("浏览器坐标系：原点在左上角，向右x正方向，向下y正方向")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" scale "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _videoPlayer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("videoScale"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过getBoundingClientRect()拿到视频元素相对于视口的上下左右距离")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" originX "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _videoPlayer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("videoOriginX"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" originY "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _videoPlayer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("videoOriginY"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e.clientX/Y拿到鼠标相对于浏览器视口的坐标")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记得处理unity和浏览器坐标系不一致的问题")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clientX "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" originX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" scale"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _videoPlayer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("videoHeight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clientY "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" originY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" scale"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ArrayBuffer 对象代表存储二进制数据的一段内存，是一个字节数组。不能被直接读写，需要创建dataView来操作二进制数据。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DataView 用来读写自定义复合类型的二进制数据。TypeArray 读写 11 种特定类型的二进制数据")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DataView 是用来处理网络设备传来的数据的，并且支持设置字节序")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataView")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUint8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" InputEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mouse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInt16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInt16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUint8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buttons"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读写内存的api")]),t._v("\n_videoPlayer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMsg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最终的buffer二进制数据")]),t._v("\n")])])]),s("h2",{attrs:{id:"_2-unity-stream-rendering底层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-unity-stream-rendering底层"}},[t._v("#")]),t._v(" 2. unity stream rendering底层")]),t._v(" "),s("p",[t._v("Unity Render Streaming是Unity开源的一个"),s("strong",[t._v("高质量、高复杂的3D模型在云端渲染，手机端侧、浏览器显示的解决方案")]),t._v("。")]),t._v(" "),s("p",[t._v("基于WebRTC，通过建立长连接，实时的传输画面，通过信令服务器（signalR）进行交互控制。")]),t._v(" "),s("p",[t._v("具体：这个包会对主机服务器的图形流信息进行编码，然后通过 WebRTC 协 议将其发送给位于接收端的浏览器和设备。事实上，通过"),s("strong",[t._v("在高性能主机系统上运行渲染引擎")]),t._v("，用户能在所有终端设备上享受到与主机相同的画质，并且能体验到所有的渲染引擎功能。")]),t._v(" "),s("h3",{attrs:{id:"_2-1-webrtc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-webrtc"}},[t._v("#")]),t._v(" 2.1 webrtc")]),t._v(" "),s("p",[t._v("一种通过网页浏览器和移动应用程序进行实时通信的协议。该协议允许以直接链接 的方式传输音频和视频，用户"),s("strong",[t._v("无需下载任何插件或应用程序")]),t._v("。"),s("strong",[t._v("通信命令通过 API 接口提交")]),t._v("，前端只要声明一个"),s("strong",[t._v("video标签")]),t._v("就可以实现视频流的加载和交互。")]),t._v(" "),s("p",[t._v("WebRTC 主要由三部分组成："),s("strong",[t._v("浏览器 API")]),t._v("、"),s("strong",[t._v("音视频引擎")]),t._v("和"),s("strong",[t._v("网络 IO")]),t._v("。")]),t._v(" "),s("p",[t._v("DTLS 有点类似 TLS，在UDP的基础上，实现信道的加密。")]),t._v(" "),s("h4",{attrs:{id:"_2-1-1-浏览器-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-浏览器-api"}},[t._v("#")]),t._v(" 2.1.1 浏览器 API")]),t._v(" "),s("ul",[s("li",[t._v("getUserMedia: 获取麦克风和摄像头的许可，使得 WebRTC 可以拿到本地媒体流；")]),t._v(" "),s("li",[t._v("RTCPeerConnection: 建立点对点连接的关键，提供了创建，保持，监控，关闭连接的方法的实现。像媒体协商、收集候选地址都需要它来完成；")]),t._v(" "),s("li",[t._v("RTCDataChannel: 支持点对点数据传输，可用于传输文件、文本消息等。")])]),t._v(" "),s("h4",{attrs:{id:"_2-1-2-音视频引擎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-音视频引擎"}},[t._v("#")]),t._v(" 2.1.2 音视频引擎")]),t._v(" "),s("p",[t._v("编码器：")]),t._v(" "),s("ul",[s("li",[t._v("VP8: VP8，VP9，都是 Google 开源的视频编解码器，现在主要用于 WebRTC 视频编码；")]),t._v(" "),s("li",[t._v("H264: 视频编码领域的通用标准，提供了高效的视频压缩编码，之前 WebRTC 最先支持的是自己家的 VP8，后面也支持了 H264、H265 等。")])]),t._v(" "),s("p",[t._v("还有像回声消除"),s("code",[t._v("AEC(Acoustic Echo Chancellor)")]),t._v("、背景噪音抑制"),s("code",[t._v("ANS(Automatic Noise Suppression)")]),t._v("和"),s("code",[t._v("Jitter buffer")]),t._v("用来防止视频抖动，这些问题在 WebRTC 中也提供了非常成熟、稳定的算法，并且提供图像增加处理，例如美颜，贴图，滤镜处理等。")]),t._v(" "),s("h4",{attrs:{id:"_2-1-3-网络i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-网络i-o"}},[t._v("#")]),t._v(" 2.1.3 网络I/O")]),t._v(" "),s("p",[t._v("WebRTC 传输层用的是 "),s("strong",[t._v("UDP")]),t._v(" 协议，因为音视频传输对"),s("strong",[t._v("及时性")]),t._v("要求更高，如果使用 TCP 当传输层协议的话，如果发生丢包的情况下，因为 TCP 的可靠性，就会尝试重连，那么传输的延迟就会达到 2 分钟。在延迟高的情况下，想做到正常的实时通讯显然是不可能的，此时 TCP 的可靠性反而成了弊端。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("RTP/SRTP")]),t._v(": 传输音视频数据流时，我们并不直接将音视频数据流交给 UDP 传输，而是先给音视频数据加个 RTP 头，然后再交给 UDP 进行，但是由于浏览器对安全性要求比较高，增加了加密这块的处理，采用 SRTP 协议；")]),t._v(" "),s("li",[s("code",[t._v("RTCP")]),t._v("：通过 RTCP 可以知道各端的网络质量，这样对方就可以做流控处理；")]),t._v(" "),s("li",[s("code",[t._v("P2P(ICE + STUN + TURN)")]),t._v(": 这是 WebRTC 最核心的技术，利用 ICE、STUN、TURN 等技术，实现了浏览器之间的直接点对点连接，解决了 "),s("strong",[t._v("NAT 穿透问题")]),t._v("，实现了高质量的网络传输。")]),t._v(" "),s("li",[t._v("WebRTC 还需要一个"),s("strong",[t._v("信令服务")]),t._v("做会话管理，但 WebRTC 规范里没有包含信令协议，需要自行实现。")])]),t._v(" "),s("h4",{attrs:{id:"_2-1-4-通信过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4-通信过程"}},[t._v("#")]),t._v(" 2.1.4 通信过程")]),t._v(" "),s("p",[t._v("**WebRTC 终端：**负责音视频采集、编解码、NAT 穿越、音视频数据传输。")]),t._v(" "),s("p",[t._v("**Signal 服务器：**负责信令处理，如加入房间、离开房间、媒体协商消息的传递等。")]),t._v(" "),s("p",[s("strong",[t._v("STUN/TURN 服务器："),s("strong",[t._v("负责")]),t._v("获取 WebRTC 终端在公网的 IP 地址")]),t._v("，以及 NAT 穿越失败后的数据中转。")]),t._v(" "),s("p",[t._v("WebRTC通过"),s("strong",[t._v("ICE框架来解决网络穿透")]),t._v("的问题，并对应用开发者屏蔽了复杂的技术细节。")]),t._v(" "),s("ul",[s("li",[t._v("本地（WebRTC 终端）启动后，检测设备可用性，如果可用后开始进行音视频采集工作；")]),t._v(" "),s("li",[t._v("本地就绪后，发送“加入房间”信令到 Signal 服务器；")]),t._v(" "),s("li",[t._v("Signal 服务器创建房间，等待加入；")]),t._v(" "),s("li",[t._v("对端（WebRTC 终端）同样操作，加入房间，并通知另一端；")]),t._v(" "),s("li",[t._v("双端创建媒体连接对象"),s("code",[t._v("RTCPeerConnection")]),t._v("，进行媒体协商；")]),t._v(" "),s("li",[t._v("双端进行连通性测试，最终建立连接；")]),t._v(" "),s("li",[t._v("将采集到的音视频数据通过"),s("code",[t._v("RTCPeerConnection")]),t._v("对象进行编码，最终通过 P2P 传送给对端/本地，再进行解码、展示。")])]),t._v(" "),s("h3",{attrs:{id:"_2-2-udp的可靠性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-udp的可靠性"}},[t._v("#")]),t._v(" 2.2 udp的可靠性")]),t._v(" "),s("p",[t._v("要基于 UDP 实现的可靠传输协议，那么就要在应用层下功夫。")]),t._v(" "),s("p",[s("strong",[t._v("HTTP3的QUIC协议：")])]),t._v(" "),s("ul",[s("li",[t._v("在一条 QUIC 连接上可以并发发送多个 HTTP 请求 (Stream)。"),s("strong",[t._v("每一个 Stream 都分配了一个独立的滑动窗口，这样使得一个连接上的多个 Stream 之间没有依赖关系，都是相互独立的，各自控制的滑动窗口")]),t._v("。")]),t._v(" "),s("li",[t._v("QUIC 实现了自己的流量控制机制。每个 Stream 都有独立的滑动窗口，所以每个 Stream 都可以做流量控制，防止单个 Stream 消耗连接（Connection）的全部接收缓冲。限制连接中所有 Stream 相加起来的总字节数")])]),t._v(" "),s("p",[s("strong",[t._v("WebRTC：")])]),t._v(" "),s("p",[t._v("**RTP协议：**先给音视频数据加个RTP头，在交给UDP进行传输")]),t._v(" "),s("p",[t._v("**RTCP协议：**两个重要的报文：RR（Reciever Report）和 SR(Sender Report)。通过这两个报文的交换，各端就知道自己的网络质量到底如何了。")]),t._v(" "),s("p",[t._v("**SDP会话描述协议：**通过信令服务器交换 SDP 信息，进行媒体协商，对其取交集，得到最后的编解码规则，传输协议等。")]),t._v(" "),s("p",[t._v("**ICE Candidate （ICE 候选者）：**端对端的建立，确定连接的协议、ip、端口")]),t._v(" "),s("h2",{attrs:{id:"_3-前端画面与unity画面的延迟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-前端画面与unity画面的延迟"}},[t._v("#")]),t._v(" 3. 前端画面与unity画面的延迟")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("unity运行的主机硬件条件")]),t._v(" "),s("p",[t._v("许多消费级显卡最多只能同时运行两个编码器，从而限制了电脑上可以运行的实例数量。对于专业级显卡来说，例如英伟达的 Quadro 或 Tesla 系列，或者基于云的 GPU 实例(AWS)则没有这些限制。")]),t._v(" "),s("p",[t._v("GPU能为视频编码提供加速，"),s("strong",[t._v("以高质量和超低延迟")]),t._v("对游戏和应用程序进行编码和推流。")])]),t._v(" "),s("li",[s("p",[t._v("前端也做了缓冲处理，比如提交数据后引入进度条")])]),t._v(" "),s("li",[s("p",[t._v("仿真数据累计到一定程度才会驱动画面中列车的运行，所以unity画面里引入了等待动画")])])]),t._v(" "),s("h2",{attrs:{id:"_4-threejs和frabicjs的底层实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-threejs和frabicjs的底层实现方式"}},[t._v("#")]),t._v(" 4. threejs和frabicjs的底层实现方式")]),t._v(" "),s("p",[t._v("Three.js正是封装的WebGL这个库，WebGL又是封装的OpenGL ES 2.0与JavaScript。而OpenGLES 2.0又是OpenGL 三维图形 API 的一个子集，而OpenGL是用于渲染2D、3D矢量图形的跨语言、跨平台的应用程序编程接口（API）")]),t._v(" "),s("p",[t._v("基于Canvas的3d上下文实现的一个API")]),t._v(" "),s("h2",{attrs:{id:"_5-模型渲染的优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-模型渲染的优化"}},[t._v("#")]),t._v(" 5. 模型渲染的优化")]),t._v(" "),s("p",[t._v("GPU的渲染过程，通常称为图形渲染管线。图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出。")]),t._v(" "),s("p",[t._v("渲染流程：顶点数据=》顶点着色器=》形状装配=》几何着色器=》光栅化=》片段着色器=》测试和混合")]),t._v(" "),s("h3",{attrs:{id:"_5-1-优化方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-优化方式"}},[t._v("#")]),t._v(" 5.1 优化方式")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("减少顶点数据量")]),t._v("（顶点储存方式=>顶点索引）")]),t._v(" "),s("p",[t._v("两个三角形的顶点是有重复的，而重复的顶点就造成存储的浪费。因而，更好的解决方案是只存储不同的顶点，然后通过索引来设定绘制这些顶点的顺序。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("重绘优化")])]),t._v(" "),s("p",[t._v("只有通过深度测试的顶点才会去执行片段着色器，换句话说，才会去计算该顶点对应像素的颜色。")]),t._v(" "),s("p",[t._v("深度测试：三维空间，可能会有多个顶点对应同一个像素。然后，记录每个顶点距离相机的距离。如果新投影的顶点比上个顶点距离相机更近，说明上个顶点会被遮挡；则只需要绘制新投影的顶点就可以了。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("顶点缓存优化")])]),t._v(" "),s("p",[t._v("GPU渲染网格的时候，需要对每个顶点执行顶点着色器。对顶点着色器变换的顶点进行缓存，同时，将具有重复顶点的三角形依次存储，就可以利用这个缓存减少顶点着色器的执行次数，从而减少GPU的计算量。")])])]),t._v(" "),s("h2",{attrs:{id:"_6-模型加载的优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-模型加载的优化"}},[t._v("#")]),t._v(" 6. 模型加载的优化")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("模型压缩")]),t._v(" "),s("p",[t._v("如Google Draco，为了提高文件的压缩比，会打乱顶点和索引的顺序，从而降低模型的渲染效率。但是，为了提高文件的压缩比，会打乱顶点和索引的顺序，从而降低模型的渲染效率。")])]),t._v(" "),s("li",[s("p",[t._v("格式转换（obj=>二进制）")])]),t._v(" "),s("li",[s("p",[t._v("indexdb缓存")])])]),t._v(" "),s("h2",{attrs:{id:"_7-opengl的了解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-opengl的了解"}},[t._v("#")]),t._v(" 7. OpenGL的了解")]),t._v(" "),s("p",[t._v("一个跨编程语言、跨平台的编程图形程序接口。流程见上。webgl就是基于它的二次封装。")]),t._v(" "),s("h2",{attrs:{id:"_8-前端框架解决了什么问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-前端框架解决了什么问题"}},[t._v("#")]),t._v(" 8. 前端框架解决了什么问题")]),t._v(" "),s("ol",[s("li",[t._v("避免重复引用大量外部js（搭配构建工具，在入口文件引入一次，就可以在所有组件中使用这个插件）")]),t._v(" "),s("li",[t._v("组件化（逻辑复用，便于合作开发）")]),t._v(" "),s("li",[t._v("性能优化（声明式相对于命令式，减少dom操作）")]),t._v(" "),s("li",[t._v("spa单页面+路由的提出")]),t._v(" "),s("li",[t._v("封装的api（v-指令，hook，生命周期，数据管理）")])]),t._v(" "),s("h2",{attrs:{id:"_9-diff算法底层-react和vue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-diff算法底层-react和vue"}},[t._v("#")]),t._v(" 9. diff算法底层-react和vue")]),t._v(" "),s("h3",{attrs:{id:"_9-1-相同点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-相同点"}},[t._v("#")]),t._v(" 9.1 相同点")]),t._v(" "),s("ul",[s("li",[t._v("都是"),s("strong",[t._v("两组虚拟dom")]),t._v("的对比(react16.8之后是fiber与虚拟dom的对比)")]),t._v(" "),s("li",[s("strong",[t._v("只对同级节点进行对比")]),t._v("，简化了算法复杂度")]),t._v(" "),s("li",[t._v("都用"),s("strong",[t._v("key做为唯一标识")]),t._v("，进行查找，只有key和标签类型相同时才会复用老节点")]),t._v(" "),s("li",[t._v("遍历前都会根据老的节点构建一个map，方便根据key快速查找")])]),t._v(" "),s("h3",{attrs:{id:"_9-2-不同点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-不同点"}},[t._v("#")]),t._v(" 9.2 不同点")]),t._v(" "),s("ul",[s("li",[t._v("react在diff遍历的时候，只对需要修改的节点进行了记录，形成effect list，最后才会根据effect list 进行真实dom的修改，修改时先删除，然后更新与移动，最后插入。")]),t._v(" "),s("li",[t._v("vue 在遍历的时候就用真实dom"),s("code",[t._v("insertBefore")]),t._v("方法，修改了真实dom，最后做的删除操作")]),t._v(" "),s("li",[t._v("react 采用单指针从左向右进行遍历")]),t._v(" "),s("li",[t._v("vue采用双指针，从两头向中间进行遍历（"),s("strong",[t._v("vue2：双端⽐较算法，vue3：借鉴ivi算法和inferno算法")]),t._v("）")]),t._v(" "),s("li",[t._v("react的虚拟diff比较简单（如果元素的类型不同，React 会抛弃旧树并建立新树。如果元素是两个相同类型的 React DOM 元素时，React 会查看两者的属性，保留 DOM 节点，只更新改变的属性。）")]),t._v(" "),s("li",[t._v("vue中做了一些优化处理，相对复杂，但效率更高（双端比较的方法，设立 4 个指针）")])]),t._v(" "),s("h2",{attrs:{id:"_10-如何提高数据查询的性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-如何提高数据查询的性能"}},[t._v("#")]),t._v(" 10. 如何提高数据查询的性能")]),t._v(" "),s("ol",[s("li",[t._v("索引")]),t._v(" "),s("li",[t._v("数据结构：散列表（O(1),无序的）、红黑树（二叉查找树logn，有序的）、跳表")])]),t._v(" "),s("h2",{attrs:{id:"_11-数据库的索引的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-数据库的索引的作用"}},[t._v("#")]),t._v(" 11. 数据库的索引的作用")]),t._v(" "),s("p",[t._v("提高查找速度（如果频繁增删改，不适合）")]),t._v(" "),s("h2",{attrs:{id:"_12-查找快的不足"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-查找快的不足"}},[t._v("#")]),t._v(" 12. 查找快的不足")]),t._v(" "),s("p",[t._v("增删改频繁，则会导致索引频繁更新")]),t._v(" "),s("h2",{attrs:{id:"_13-数组与链表的增删改查区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-数组与链表的增删改查区别"}},[t._v("#")]),t._v(" 13. 数组与链表的增删改查区别")]),t._v(" "),s("p",[t._v("数组：")]),t._v(" "),s("ul",[s("li",[t._v("增：对于插入操作，有序数组的"),s("strong",[t._v("时间复杂度是O(n)")]),t._v("，因为他需要把比插入数大的都往后移.")]),t._v(" "),s("li",[t._v("删：对于删除操作，需要先找到该数，其次再删除该数，该数后面的数全部都往前移。因此总的过程的"),s("strong",[t._v("时间复杂度为O(N)级别")]),t._v("。")]),t._v(" "),s("li",[t._v("改：同删除操作，“改”需要先找到该数，之后因为此数组有序，所以还得移动该数，使数组恢复有序。因此"),s("strong",[t._v("时间复杂度为O(N)")]),t._v(".")]),t._v(" "),s("li",[t._v("查：根据下标索引很快O(1)")])]),t._v(" "),s("p",[t._v("链表：")]),t._v(" "),s("ul",[s("li",[t._v("增：插入一个指定节点，时间复杂度为O(1)。")]),t._v(" "),s("li",[t._v("删除：删除指定节点，需要先找到指定位置，通过节点数据（假设数据不重复）删除指定位置节点,"),s("strong",[t._v("时间复杂度为O(N)")])]),t._v(" "),s("li",[t._v("修改：修改指定位置节点数据,需要先查找到该节点，"),s("strong",[t._v("时间复杂度为O(N)")])]),t._v(" "),s("li",[t._v("查询：查询某个节点的位置，查询某个位置中的节点数据，查询某个数据是否存在于链表中（假设数据不重复）,"),s("strong",[t._v("时间复杂度为O(N)")])])]),t._v(" "),s("h2",{attrs:{id:"_14-数组与链表在内存中布局区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-数组与链表在内存中布局区别"}},[t._v("#")]),t._v(" 14. 数组与链表在内存中布局区别")]),t._v(" "),s("p",[t._v("数组是将元素在内存中连续存储的，查找数据的时候效率比较高。但是，缺点：在存储之前，我们需要申请一块连续的内存空间，并且在编译的时候就必须确定好它的空间的大小。（需频繁查询）")]),t._v(" "),s("p",[t._v("链表是动态申请内存空间，在内存中可以在任意的位置，通过指针联系。增加和删除以及插入比数组灵活。（需频繁修改）")]),t._v(" "),s("h2",{attrs:{id:"_15-定量数组频繁增删改-怎么优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-定量数组频繁增删改-怎么优化"}},[t._v("#")]),t._v(" 15. 定量数组频繁增删改，怎么优化")]),t._v(" "),s("p",[s("strong",[t._v("使用标记删除")]),t._v("：对于需要删除元素的操作，可以使用标记删除的方式。"),s("strong",[t._v("即将要删除的元素标记为无效")]),t._v("，而不是真正地从数组中删除。通过维护一个标记数组或使用元素自身的属性来标记删除的元素，可以在"),s("strong",[t._v("需要遍历数组时跳过无效的元素")]),t._v("。当数组中无效元素的数量"),s("strong",[t._v("达到一定阈值时，可以触发一次真正的删除操作")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_16-async-await底层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-async-await底层"}},[t._v("#")]),t._v(" 16. async/await底层")]),t._v(" "),s("p",[t._v("生成器（协程）+co")]),t._v(" "),s("h2",{attrs:{id:"_17-什么是协程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-什么是协程"}},[t._v("#")]),t._v(" 17. 什么是协程")]),t._v(" "),s("p",[s("strong",[t._v("协程是一种比线程更轻量级的存在，它不由cpu直接调度，而是在用户态可以通过程序来操纵。")]),t._v(" 你可以理解为协程是跑在线程上的任务，一个线程上可以有多个协程，但是一个线程同时只能执行一个协程。")]),t._v(" "),s("p",[t._v("比如，全局执行上下文在主线程上执行，可将全局执行上下文叫做父协程。当执行到a函数，主线程控制权由父协程转为a函数协程。")]),t._v(" "),s("h2",{attrs:{id:"_18-栈内存和堆内存的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-栈内存和堆内存的区别"}},[t._v("#")]),t._v(" 18. 栈内存和堆内存的区别")]),t._v(" "),s("p",[t._v("栈内存是为线程留出的临时空间，栈空间存储的数据只能由当前线程访问。栈空间的分配和回收是由系统来做的，我们不需要手动控制。")]),t._v(" "),s("p",[t._v("堆内存大小不固定，可以动态扩容，空间由程序员动态分配，更加灵活。堆内存可以被一个进程内所有的线程访问，容易出问题。")]),t._v(" "),s("h2",{attrs:{id:"_19-为什么引用类型放堆-基础类型放栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-为什么引用类型放堆-基础类型放栈"}},[t._v("#")]),t._v(" 19. 为什么引用类型放堆，基础类型放栈")]),t._v(" "),s("ul",[s("li",[t._v("堆比栈大，栈比堆的运算速度快。")]),t._v(" "),s("li",[t._v("引用数据类型可以自由扩展，如：数组可以无限扩充，对象可以自由添加属性。将他们放在堆中是为了不影响栈的效率。而是通过引用的方式查找到堆中的实际对象再进行操作。")]),t._v(" "),s("li",[t._v("简单数据类型就比较稳定，并且它只占据很小的内存。放在堆，指针指向，要花费时间。")])]),t._v(" "),s("h2",{attrs:{id:"_20-栈内存需要垃圾回收吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-栈内存需要垃圾回收吗"}},[t._v("#")]),t._v(" 20. 栈内存需要垃圾回收吗")]),t._v(" "),s("p",[t._v("不需要，js垃圾回收（标记清除）是针对引用数据类型。")]),t._v(" "),s("h2",{attrs:{id:"_21-js定义数组为什么可以不设置长度-怎么实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-js定义数组为什么可以不设置长度-怎么实现的"}},[t._v("#")]),t._v(" 21. js定义数组为什么可以不设置长度，怎么实现的")]),t._v(" "),s("p",[t._v("js数组和上述数组有点特殊")]),t._v(" "),s("ul",[s("li",[t._v("js数组可以是不同数据类型元素")]),t._v(" "),s("li",[t._v("js数组可以任意更改大小")])]),t._v(" "),s("p",[t._v("在JS中数组存在两种形式：")]),t._v(" "),s("ul",[s("li",[t._v("一种是与 "),s("code",[t._v("C/C++")]),t._v(" 等相同的在连续内存中存放数据的"),s("strong",[t._v("快数组")]),t._v("，")]),t._v(" "),s("li",[t._v("另一种是 "),s("code",[t._v("HashTable")]),t._v(" 结构的"),s("strong",[t._v("慢数组")]),t._v("，是一种典型的"),s("strong",[t._v("字典形式")]),t._v("。长度可变，"),s("strong",[t._v("通过扩容")]),t._v("和"),s("strong",[t._v("收缩机制")])]),t._v(" "),s("li",[t._v("在 V8 引擎中，直接创建数组默认的方式是创建"),s("strong",[t._v("快数组")]),t._v("，会直接为数组开辟"),s("strong",[t._v("一定大小连续的内存")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"_22-解释型语言和编译型语言的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-解释型语言和编译型语言的区别"}},[t._v("#")]),t._v(" 22. 解释型语言和编译型语言的区别")]),t._v(" "),s("ul",[s("li",[t._v("js"),s("strong",[t._v("解释型语言")]),t._v("：执行程序都需要一边转换一边执行，用到哪些源代码就将哪些源代码转换成机器码，用不到的不进行任何处理。可跨平台运行。")]),t._v(" "),s("li",[s("strong",[t._v("编译型语言")]),t._v("：将所有的源代码编译成机器码（exe文件）后，就可随时运行。不可跨平台运行。")])]),t._v(" "),s("h2",{attrs:{id:"_23-解释型语言如何保障性能-v8-js引擎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-解释型语言如何保障性能-v8-js引擎"}},[t._v("#")]),t._v(" 23. 解释型语言如何保障性能（V8 js引擎）")]),t._v(" "),s("p",[t._v("V8 采用了"),s("strong",[t._v("延迟解析")]),t._v("（lazy parsing）等方式保证了语言的快速启动，在解析过程中，对于不是立即执行的函数，只进行预解析；")]),t._v(" "),s("p",[t._v("V8是基于AST直接生成本地代码，没有经过中间表示层的优化，所以本地代码尚未经过很好的优化。")]),t._v(" "),s("h2",{attrs:{id:"_24-跨端有哪些了解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24-跨端有哪些了解"}},[t._v("#")]),t._v(" 24. 跨端有哪些了解")]),t._v(" "),s("p",[t._v("flutter、react native、weex")]),t._v(" "),s("h2",{attrs:{id:"_25-uni底层是如何实现跨端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25-uni底层是如何实现跨端"}},[t._v("#")]),t._v(" 25. uni底层是如何实现跨端")]),t._v(" "),s("p",[t._v("uni底层是如何实现跨端。")]),t._v(" "),s("p",[t._v("uni-app能实现一套代码、多端运行，是通过编译器和runtime配合完成的。")]),t._v(" "),s("p",[t._v("编译器将开发者的代码进行编译，编译的输出物由各个终端的runtime进行解析，uni-app在每个平台（Web、Android App、iOS App、各家小程序）都有各自的runtime。")]),t._v(" "),s("ul",[s("li",[t._v("开发者按uni-app规范编写代码，由编译器将开发者的代码编译生成每个平台支持的特有代码\n"),s("ul",[s("li",[t._v("在web平台，将.vue文件编译为js代码。与普通的vue cli项目类似")]),t._v(" "),s("li",[t._v("在微信小程序平台，编译器将.vue文件拆分生成wxml、wxss、js等代码")]),t._v(" "),s("li",[t._v("在app平台，将.vue文件编译为js代码。进一步，如果涉及uts代码：")]),t._v(" "),s("li",[t._v("在Android平台，将.uts文件编译为kotlin代码")]),t._v(" "),s("li",[t._v("在iOS平台，将.uts文件编译为swift代码")])])])])])}),[],!1,null,null,null);a.default=v.exports}}]);