(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{562:function(t,a,s){"use strict";s.r(a);var n=s(6),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-自我介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-自我介绍"}},[t._v("#")]),t._v(" 1. 自我介绍")]),t._v(" "),s("h2",{attrs:{id:"_2-青岛项目技术设计-详细介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-青岛项目技术设计-详细介绍"}},[t._v("#")]),t._v(" 2. 青岛项目技术设计，详细介绍")]),t._v(" "),s("ol",[s("li",[t._v("前处理三维静态模型")]),t._v(" "),s("li",[t._v("前处理二维轨道预览")]),t._v(" "),s("li",[t._v("后处理仿真三维场景")])]),t._v(" "),s("h2",{attrs:{id:"_3-参数和3d模型的渲染的影响"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-参数和3d模型的渲染的影响"}},[t._v("#")]),t._v(" 3. 参数和3d模型的渲染的影响")]),t._v(" "),s("p",[t._v("这个需要模型配合。")]),t._v(" "),s("h2",{attrs:{id:"_4-三维模型渲染慢的解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-三维模型渲染慢的解决方案"}},[t._v("#")]),t._v(" 4. 三维模型渲染慢的解决方案")]),t._v(" "),s("ol",[s("li",[t._v("前后端请求")]),t._v(" "),s("li",[t._v("压缩三维模型")]),t._v(" "),s("li",[t._v("异步加载模型")]),t._v(" "),s("li",[t._v("转化成 Blob 格式的文件，存在 IndexedDB 中，就可以解决免去二次加载时网络请求的时间。（localforage.setItem()）")]),t._v(" "),s("li",[t._v("模型预加载")]),t._v(" "),s("li",[t._v("过渡loading")])]),t._v(" "),s("h2",{attrs:{id:"_5-umi屏幕适配原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-umi屏幕适配原理"}},[t._v("#")]),t._v(" 5. umi屏幕适配原理")]),t._v(" "),s("ol",[s("li",[t._v("将根节点字体设置为屏幕宽度的十分之一")]),t._v(" "),s("li",[t._v("利用插件postcss将css的px转化为rem")])]),t._v(" "),s("h2",{attrs:{id:"_6-其他适配方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-其他适配方案"}},[t._v("#")]),t._v(" 6. 其他适配方案")]),t._v(" "),s("ol",[s("li",[t._v("百分比布局")]),t._v(" "),s("li",[t._v("rem布局")]),t._v(" "),s("li",[t._v("媒体查询+改根节点字体/改静态页面")]),t._v(" "),s("li",[t._v("flex弹性布局")]),t._v(" "),s("li",[t._v("流式布局，宽度百分比，高度px")])]),t._v(" "),s("h2",{attrs:{id:"_7-echart渲染大数据做了哪些优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-echart渲染大数据做了哪些优化"}},[t._v("#")]),t._v(" 7. echart渲染大数据做了哪些优化")]),t._v(" "),s("ol",[s("li",[t._v("提供dataZoom，进行数据区域放缩，类似于范围条，只显示所选范围的")]),t._v(" "),s("li",[t._v("线条曲线提供sampling，过滤数据，比如只取过滤点的最大值、平均值等，还有个lttb算法（最大程度保证数据趋势和极值）")]),t._v(" "),s("li",[t._v("提供appendData进行分片加载数据和增量渲染（渲染新数据时不会清除已经渲染的）")])]),t._v(" "),s("h2",{attrs:{id:"_8-渲染大数据表格方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-渲染大数据表格方案"}},[t._v("#")]),t._v(" 8. 渲染大数据表格方案")]),t._v(" "),s("ol",[s("li",[t._v("echart提供的一些api优化，如sampling中的lttb算法过滤数据，dataZoom区域显示，appendData进行分片加载数据和增量渲染。")]),t._v(" "),s("li",[t._v("懒加载表图，只显示屏幕上的。")]),t._v(" "),s("li",[t._v("web worker，将计算密集型或者高延迟的渲染任务交给worker线程，主线程负责ui交互。")]),t._v(" "),s("li",[t._v("虚拟列表：只渲染可视区域的内容的列表。当鼠标滚动时，再渲染下一波内容，即虚拟列表中的dom元素始终是指定数目的。\n"),s("ol",[s("li",[t._v("计算当前可见区域起始数据的 startIndex")]),t._v(" "),s("li",[t._v("计算当前可见区域结束数据的 endIndex")]),t._v(" "),s("li",[t._v("计算当前可见区域的数据，并渲染到页面中")]),t._v(" "),s("li",[t._v("计算 startIndex 对应的数据在整个列表中的偏移位置 startOffset，并设置到列表上")])])])]),t._v(" "),s("h2",{attrs:{id:"_9-fiber架构-完整"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-fiber架构-完整"}},[t._v("#")]),t._v(" 9. fiber架构（完整）")]),t._v(" "),s("p",[t._v("背景：传统dom tree遍历子节点需要进行递归，会占用大量js调用栈。而是用fiber tree遍历链表，不用递归。（递归调用，执行栈会越来越深，而且不能中断，中断后就不能恢复了。递归如果非常深，就会十分卡顿。）")]),t._v(" "),s("p",[t._v("React Fiber把"),s("strong",[t._v("更新过程碎片化")]),t._v("，把一个"),s("strong",[t._v("耗时长的任务分成很多小片")]),t._v("，每一个小片的运行时间很短，虽然总时间依然很长，但是在每个小片执行完之后，都给其他任务一个执行的机会，"),s("strong",[t._v("这样唯一的线程就不会被独占")]),t._v("，其他任务依然有运行的机会。")]),t._v(" "),s("ul",[s("li",[t._v("每个"),s("strong",[t._v("元素")]),t._v("都会有一个fiber对象对应。这些fiber对象之间相互关联，构成了"),s("strong",[t._v("fiber tree")]),t._v("。")]),t._v(" "),s("li",[t._v("react fiber的"),s("strong",[t._v("更新过程是碎片化")]),t._v("的，一次更新会分为n个任务片。每个片执行完成后就会把"),s("strong",[t._v("控制权交给调度器。")])]),t._v(" "),s("li",[s("strong",[t._v("调度器")]),t._v("会查看浏览器"),s("strong",[t._v("是否有级别更高的任务")]),t._v("（比如：alert，onclick，等），如果有执行这个高级别任务。")]),t._v(" "),s("li",[t._v("当整个FiberTree中的节点都被处理后，统一提交所有FiberNode更新。")]),t._v(" "),s("li",[t._v("好处：细粒度的任务调度能力=>细化了任务的粒度=>降低了任务阻塞的时长，对任务整体来说没有提速。")])]),t._v(" "),s("p",[t._v("遇到"),s("strong",[t._v("进程阻塞")]),t._v("的问题时，"),s("strong",[t._v("任务分割、异步调用 和 缓存策略")]),t._v(" 是三个显著的解决思路。")]),t._v(" "),s("h2",{attrs:{id:"_10-fiber切分小块后为什么由合起来"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-fiber切分小块后为什么由合起来"}},[t._v("#")]),t._v(" 10. fiber切分小块后为什么由合起来")]),t._v(" "),s("h2",{attrs:{id:"_11-强缓存、协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-强缓存、协商缓存"}},[t._v("#")]),t._v(" 11. 强缓存、协商缓存")]),t._v(" "),s("h3",{attrs:{id:"_11-1-强缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-强缓存"}},[t._v("#")]),t._v(" 11.1 强缓存")]),t._v(" "),s("p",[t._v("强缓存：不用请求服务器，在过期时间内直接从缓存中读取资源")]),t._v(" "),s("p",[s("strong",[t._v("expire和cache-control: max-age=300")])]),t._v(" "),s("p",[t._v("其中max-age=300 public/private/immutable/no-cache/no-store")]),t._v(" "),s("ul",[s("li",[t._v("public指客户端和代理服务器都可以缓存该资源")]),t._v(" "),s("li",[t._v("private指只允许客户端缓存该资源")]),t._v(" "),s("li",[t._v("immutable使用户做了刷新操作，也不向服务器发起http请求")]),t._v(" "),s("li",[t._v("no-cache指不使用强缓存")]),t._v(" "),s("li",[t._v("no-store指不使用缓存")])]),t._v(" "),s("h3",{attrs:{id:"_11-2-协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-协商缓存"}},[t._v("#")]),t._v(" 11.2 协商缓存")]),t._v(" "),s("p",[t._v("协商缓存：请求服务器是否使用缓存，服务器根据请求头判断")]),t._v(" "),s("p",[t._v("last-modified（资源最后请求时间）和Etag（请求资源文件的hash值）")]),t._v(" "),s("ul",[s("li",[t._v("last-modified精确到秒，所以一秒若改变多次，只会更新最后一次")]),t._v(" "),s("li",[t._v("Etag由服务端生成，增加服务端压力")])]),t._v(" "),s("h2",{attrs:{id:"_12-强缓存存储方案和策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-强缓存存储方案和策略"}},[t._v("#")]),t._v(" 12. 强缓存存储方案和策略")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对与"),s("strong",[t._v("频繁变动")]),t._v("的资源：")]),t._v(" "),s("p",[t._v("使用 "),s("strong",[t._v("Cache-Control: no-cache")]),t._v("，使浏览器每次都请求服务器，然后配合 "),s("strong",[t._v("ETag 或者 Last-Modified")]),t._v(" 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。")])]),t._v(" "),s("li",[s("p",[t._v("对于"),s("strong",[t._v("不常变化")]),t._v("的资源：")]),t._v(" "),s("p",[t._v("通常在处理这类资源时，给它们的 Cache-Control 配置一个"),s("strong",[t._v("很大的 max-age=31536000 ("),s("strong",[t._v("一年)，这样浏览器之后请求相同的 URL 会命中强制缓存。而为了")]),t._v("解决更新的问题，"),s("strong",[t._v("就需要在文件名(或者路径)中添加 hash， 版本号等动态字符，之后更改动态字符，从而")]),t._v("达到更改引用 URL 的目的")]),t._v("，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。")])]),t._v(" "),s("li",[s("p",[t._v("对于"),s("strong",[t._v("首屏")]),t._v("：")]),t._v(" "),s("p",[t._v("向vue打包的js，css文件名都是有hash值的，唯一的，页面请求的是新资源，自然不会有缓存问题，但是index.html会存在更新问题，所以一般对index.html使用协商缓存而不是强缓存。")])])]),t._v(" "),s("h2",{attrs:{id:"_13-磁盘缓存和内存缓存-何时使用-使用策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-磁盘缓存和内存缓存-何时使用-使用策略"}},[t._v("#")]),t._v(" 13. 磁盘缓存和内存缓存，何时使用，使用策略")]),t._v(" "),s("ul",[s("li",[t._v("内存缓存："),s("strong",[t._v("访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存")]),t._v("，关闭 Tab 页面，内存中的缓存也就被释放了。")]),t._v(" "),s("li",[t._v("磁盘缓存：根据请求头。"),s("strong",[t._v("大文件或者内存使用率高时，放在磁盘。")])]),t._v(" "),s("li",[t._v("离线缓存：运行在浏览器背后的独立线程，一般可以用来实现缓存功能。让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。")]),t._v(" "),s("li",[t._v("推送缓存")])]),t._v(" "),s("h2",{attrs:{id:"_14-promise、async、generator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-promise、async、generator"}},[t._v("#")]),t._v(" 14. promise、async、generator")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("promise")]),t._v("：实现异步编程，为构造函数，传入resolve和reject，通过then方法处理成功或者失败后的回调。通过链式调用，可以防止回调地狱等问题。")]),t._v(" "),s("li",[t._v("**async：**与await配合，实现异步编程同步化。async返回一个promise对象，await后面为async返回的promise对象，此时await会阻塞后面的代码，等待该promise对象resolve的值。")]),t._v(" "),s("li",[t._v("**generator：**每调用一次生成器，函数内部状态就改变一次。他是一个带星号的函数，通过yield关键字实现改变。函数.next()就会执行一次，返回value和done")])]),t._v(" "),s("h2",{attrs:{id:"_15-await异步代码同步化-generator-co库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-await异步代码同步化-generator-co库"}},[t._v("#")]),t._v(" 15. await异步代码同步化（generator+co库）")]),t._v(" "),s("p",[t._v("async、await 是 co 库的官方实现。也可以看作自带启动器的 generator 函数的语法糖。不同的是，async、await 只支持 Promise 和原始类型的值，不支持 thunk 函数。")]),t._v(" "),s("p",[t._v("如果用生成器实现await的话，每次next后，会返回一个value，该value为promise，需要value.then的res作为传参放入到迭代器的下一个next中，直到done为true。")]),t._v(" "),s("p",[t._v("每次执行 generator 函数时自己写启动器比较麻烦。"),s("strong",[t._v("co函数库 是一个 generator 函数的自启动执行器")]),t._v("，使用条件是 generator 函数的 yield 命令后面，只能是 thunk 函数或 Promise 对象，co 函数执行完返回一个 Promise 对象。该promise对象的res就是await等待执行后获得的值。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// async await")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readfile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" content1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileWithPromise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/etc/passwd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" content2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileWithPromise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/etc/profile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'done'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readfile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// generator with co")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("co")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" content1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileWithPromise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/etc/passwd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" content2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileWithPromise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/etc/profile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'done'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fail'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"_16-yield和await的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-yield和await的区别"}},[t._v("#")]),t._v(" 16. yield和await的区别")]),t._v(" "),s("p",[t._v("yield：一旦遇到yield，生成器就会暂停执行，next()后恢复")]),t._v(" "),s("p",[t._v("await：等待一个promise对象执行结果。内部原理为自动迭代器co函数+生成器generator")]),t._v(" "),s("h2",{attrs:{id:"_17-生成器generator原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-生成器generator原理"}},[t._v("#")]),t._v(" 17. 生成器generator原理")]),t._v(" "),s("p",[t._v("生成器究竟是如何让函数暂停, 又会如何恢复的呢")]),t._v(" "),s("p",[s("strong",[t._v("协程的执行机制")])]),t._v(" "),s("p",[t._v("协程理解为线程中的一个个任务。"),s("strong",[t._v("一个线程一次只能执行一个协程")]),t._v("。比如当前执行 A 协程，另外还有一个 B 协程，如果想要执行 B 的任务，就必须在 A 协程中将"),s("strong",[t._v("JS 线程的控制权转交给 B协程")]),t._v("，那么现在 B 执行，A 就相当于处于暂停的状态。")]),t._v(" "),s("h2",{attrs:{id:"_17-怎么了解前端新技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-怎么了解前端新技术"}},[t._v("#")]),t._v(" 17. 怎么了解前端新技术")]),t._v(" "),s("h2",{attrs:{id:"_18-学习前端的规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-学习前端的规划"}},[t._v("#")]),t._v(" 18. 学习前端的规划")]),t._v(" "),s("h2",{attrs:{id:"_19-有没有脱离框架-了解一些框架的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-有没有脱离框架-了解一些框架的原理"}},[t._v("#")]),t._v(" 19. 有没有脱离框架，了解一些框架的原理")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("umi的全局共享数据")]),t._v(" "),s("p",[t._v("底层基于React.context实现，umi会将model文件夹自定义的hook函数里的state设置为全局状态，当组件要使用时，会在组件外部包裹一层context的provider标签，将state提供给组件使用。同时会提供一个setState的函数，对全局数据进行更改。")]),t._v(" "),s("p",[t._v("原始的context数据流很乱，umi对其进行二次封装，提用户管理数据流，使之更清晰")]),t._v(" "),s("p",[t._v("同样的，redux也是将数据流更加清晰。将数据统一放在state树中，通过dispatch一个action，使之执行对应的reducer更改数据。")])]),t._v(" "),s("li",[s("p",[t._v("umi自适应")]),t._v(" "),s("p",[t._v("根节点字体设为屏幕宽度1/10，postcss插件将css的px转为rem，根据媒体查询改变布局")])]),t._v(" "),s("li",[s("p",[t._v("echart的大数据渲染优化方案")]),t._v(" "),s("p",[t._v("appendData：分片加载和增量渲染；sampling：数据过滤；dataZoom分区渲染")])])]),t._v(" "),s("h2",{attrs:{id:"_20-反问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-反问"}},[t._v("#")]),t._v(" 20. 反问")]),t._v(" "),s("p",[t._v("技术栈：面向阿里巴巴内部办事，react、数据可视化、ai结合大模型、webpack")])])}),[],!1,null,null,null);a.default=r.exports}}]);