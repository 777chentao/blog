(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{548:function(t,v,e){"use strict";e.r(v);var _=e(6),a=Object(_.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("Abp vNext 是我自学习和使用 Asp.Net Core 以来使用过的最多且最舒服的开发框架，但是相对于个人开发者而言，还是有点重。为此，我萌发了基于 Abp vNext 框架进行减负，开发一个符合个人使用习惯的框架 Atomic。本系列主要用于记录框架开发历程，同时也是对 Abp vNext 框架中核心功能的解析。")]),t._v(" "),e("h2",{attrs:{id:"萌芽"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#萌芽"}},[t._v("#")]),t._v(" 萌芽")]),t._v(" "),e("p",[t._v("自接触和使用 Abp vNext 的框架至今已有近两年了，期间也完成过两个完整项目的开发。不得不说 Abp vNext 框架凭借优秀的模块化设计，科学的 DDD 理念，以及对大量开源产品的整合，为 .Net Core 开发者提供了一个开箱即用的解决方案。但是，随着对框架的不断钻研以及项目开发中的切实体会，也发现了框架为了通用而做出的大量折衷，这对于业务庞大的企业级团队来说是优势，但是对于业务专精的个人开发者而言却是一种负担。")]),t._v(" "),e("p",[t._v("Abp vNext 具体提供的功能在"),e("a",{attrs:{href:"https://abp.io/features",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方网站"),e("OutboundLink")],1),t._v("有详细的介绍，但是仅相对于"),e("strong",[t._v("个人开发者而")]),t._v("言，我在使用过程中遇到过以下几个让人不那么舒服的点：")]),t._v(" "),e("ol",[e("li",[t._v("对多租户的过度集成。Abp vNext 默认继承了多租户的功能，让开发者能够几乎无感地开发出支持多租户功能的项目。但是，这也意味着你几乎无法彻底地将多租户功能从你的代码中剔除。")]),t._v(" "),e("li",[t._v("对代码目录结构的过度拆分。Abp vNext 的官方开发模版依据 DDD 将一个项目拆分成 7 个类库 + 1 个 Web 应用 + 5 个单元测试应用。其中，Domain.Shared，Application.Contract 以及 HttpApi.Client 这三个类库是为了跨项目共享而存在的，并非适合所有开发者。")]),t._v(" "),e("li",[t._v("与微服务基础设施有功能的重合。HttpApi.Client 类库主要做的就是服务调用，而且还只局限在了 .Net 平台。而 K8S 以及 Dapr 等提供的服务调用完全是跨语言的，在功能以及适用性上均远超 Abp vNext 的轮子。")]),t._v(" "),e("li",[t._v("对 .Net 的高度依赖。要想充分发挥 Abp vNext 的作用，你需要与 .Net 进行深度的绑定。一方面，仅国内而言，.Net 并不适合让个人或企业 All-In，个人找不到工作，企业招不到人；另一方面，云原生的时代，我们不应该和任何一门语言或技术深度绑定。")])]),t._v(" "),e("p",[t._v("其中，与微服务基础设施的功能重合这一点着实让人有点爱不起来。在我看来，微服务是大势，云原生的环境让语言变得不再如以前那样重要。任何试图以一个语言完成所有功能的尝试都类似于将所有鸡蛋放到一个篮子里，是极其危险的事情。")]),t._v(" "),e("p",[t._v("除此之外，Abp vNext 还有一些小细节让我有点膈应：")]),t._v(" "),e("ol",[e("li",[t._v("swagger api 界面官方自己加料，一时半会还去不掉。这确实不是大问题，而且对于单体应用来说很有必要，但是对于微服务应用来说，每一个项目里面都有 api fefinition 和 application configuration 的 api 端口就很烦了，完全用不到好吗")]),t._v(" "),e("li",[t._v("前端框架适配不全。目前 Abp vNext 框架的前端只支持 MVC，Blazor，Angular，其中 MVC 与 .Net 绑定，Blzaor 与 .Net 绑定且较新，让人不太敢用，Angular 最近几年在国内几乎消失。社区一直希望官方能够将 js 相关的基础设施从 Angular 中抽离出来，但是官方迟迟没有动静。")])]),t._v(" "),e("p",[t._v("以上是我使用 Abp vNext 进行了两个项目开发之后的个人感受，再加上国内目前的就业形势，以及对未来的规划，我认识到，我已经没有必要在 Abp vNext 这个大而全框架上进一步深挖了。")]),t._v(" "),e("h2",{attrs:{id:"坚定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#坚定"}},[t._v("#")]),t._v(" 坚定")]),t._v(" "),e("p",[t._v("不知道什么时候发现的 Dapr 了，但是只知道看到的第一眼就被它的理念和宏图（分布式应用运行时）所吸引。Dapr 通过多种方式将微服务中的常见需求进行了封装，让开发者真正地只需要专注于业务而非基础设施。")]),t._v(" "),e("ol",[e("li",[t._v("Building Blocks 将微服务需求与具体实现分离。服务调用，状态管理，发布与订阅，统一日志管理，请求追踪等等功能都只需要简单的 Api 调用而不用操心各种配置以及具体实现。")]),t._v(" "),e("li",[t._v("Resource Bindings 提供了与第三方应用的互动。收发邮件，定时任务，APN 推送等等，这一块的可定制性又极强。")]),t._v(" "),e("li",[t._v("Middleware 则实现了关注点分离，将用户的认证与授权等功能从所有应用中抽离出来，形成统一的逻辑。这一块目前支持的功能还不多，但是同样地，基于社区推动，所有人都可以贡献自己的模块。")]),t._v(" "),e("li",[t._v("SideCar 模式实现了所有功能的语言无关，让开发者可以自由地选择喜欢的语言进行微服务，分布式应用的开发。目前还提供了常用语言的 SDK，进一步加快了开发进度。")]),t._v(" "),e("li",[t._v("与 K8S 的整合让部署也变得简单。")])]),t._v(" "),e("p",[t._v("在关注到 Dapr 之后，我越发感觉到 Abp vNext 框架的繁重，有必要开发一个小而精的简单框架，只包含必要的异常捕获，数据库封装等基本功能，然后将所有微服务相关的功能实现转移到 Dapr。")]),t._v(" "),e("h2",{attrs:{id:"启程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启程"}},[t._v("#")]),t._v(" 启程")]),t._v(" "),e("p",[t._v("至此，造轮子的动机终于成立了，新的框架我取名为 Atomic，就是希望它足够小，只在 Asp.Net Core 的基础上进行简单的封装，满足小项目的快速开发，以及与以 Dapr 为核心的多个应用的整合。")]),t._v(" "),e("p",[t._v("但是，由于缺乏业务的磨练，我在对框架的需求分析以及功能实现方面仍然有大量的不足，因此初步打算是先按照功能模块对 Abp vNext 框架进行源码解析，然后从中挑选出适合保留的部分抄到我的框架中。初步的打算包括：")]),t._v(" "),e("ol",[e("li",[t._v("基于约定的依赖注入")]),t._v(" "),e("li",[t._v("模块化（暂定，微服务真的需要模块化吗？）")]),t._v(" "),e("li",[t._v("异常捕获与 Api 统一格式")]),t._v(" "),e("li",[t._v("基于数据库的国际化")]),t._v(" "),e("li",[t._v("通过注解实现的权限管理")])]),t._v(" "),e("p",[t._v("实现了这五大部分之后，再通过若干个 demo 应用展示其与 Dapr，前端，其他语言等等的结合。")]),t._v(" "),e("p",[t._v("以上。")])])}),[],!1,null,null,null);v.default=a.exports}}]);